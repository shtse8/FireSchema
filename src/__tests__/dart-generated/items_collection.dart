/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import 'package:cloud_firestore/cloud_firestore.dart';
// Runtime Imports
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import the runtime package

// Local Imports
import 'items_data.dart';
import 'items_query.dart';
import 'items_update.dart';





import './items/tags_collection.dart'; // Import subcollection class
import './items/tags_data.dart'; // Import subcollection data class



/// Typed reference to the 'items' collection, extending BaseCollectionRef.
class ItemsCollection extends BaseCollectionRef<ItemsData, ItemsAddData> { // Use the specific AddData type

  /// Creates a ItemsCollection instance.
  ItemsCollection({
    required FirebaseFirestore firestore,
    DocumentReference? parentRef, // Optional parent ref
  }) : super(
          firestore: firestore,
          collectionId: 'items',
          parentRef: parentRef,
          // Provide the fromFirestore and toFirestore converters specific to ItemsData
          fromFirestore: ItemsData.fromFirestore,
          toFirestore: (data, options) => data.toFirestore(options),
          // Pass schema details if needed by base class features (like defaults)
          schema: const { // Example schema structure - adjust if BaseCollectionRef uses it differently
            'fields': {
              'name': { 'defaultValue': null },
              'value': { 'defaultValue': null },
              'createdAt': { 'defaultValue': "serverTimestamp" },
            },
          },
        );

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /// Creates a new ItemsQueryBuilder instance for this collection.
  ItemsQueryBuilder query() {
    // Returns the specific generated QueryBuilder
    return ItemsQueryBuilder(
      firestore: firestore, // Pass firestore instance
      collectionRef: ref, // Pass the typed collection reference
    );
  }

  /// Creates a new ItemsUpdateBuilder instance for the document with the given ID.
  ItemsUpdateBuilder update(String id) {
    // Returns the specific generated UpdateBuilder
    return ItemsUpdateBuilder(docRef: doc(id)); // Pass the typed document reference
  }

  // --- Subcollection Accessors ---




  /// Access the 'tags' subcollection for a specific document.
  TagsCollection tags(String documentId) {
    // Use the helper method from BaseCollectionRef
    // Need to define the factory function for the subcollection class
    // Call subCollection helper with positional arguments
    return subCollection(
      documentId, // parentId
      'tags', // subCollectionId
      // subCollectionFactory (factory function)
      // subCollectionFactory (Simplified signature matching the updated BaseCollectionRef helper)
      ({
        required FirebaseFirestore firestore,
        required String collectionId,
        CollectionSchema? schema,
        required DocumentReference? parentRef,
      }) => TagsCollection(firestore: firestore, parentRef: parentRef),
      // subFromFirestore (Use the correct sub-model name)
      TagsData.fromFirestore,
      // subToFirestore
      (data, options) => (data as TagsData).toFirestore(options),
      // subSchema (optional)
      const { // Construct the schema object for the subcollection
        'fields': {
          'label': { 'defaultValue': null },
        },
      },
    );
  }



  // --- Custom Methods Placeholder ---
}