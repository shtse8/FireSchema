/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import 'package:cloud_firestore/cloud_firestore.dart';
// Runtime Imports
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import the runtime package

// Local Imports
import 'tags_data.dart';
import 'tags_query.dart';
import 'tags_update.dart';



/// Typed reference to the 'tags' collection, extending BaseCollectionRef.
class TagsCollection extends BaseCollectionRef<TagsData, TagsAddData> { // Use the specific AddData type

  /// Creates a TagsCollection instance.
  TagsCollection({
    required FirebaseFirestore firestore,
    DocumentReference? parentRef, // Optional parent ref
  }) : super(
          firestore: firestore,
          collectionId: 'tags',
          parentRef: parentRef,
          // Provide the fromFirestore and toFirestore converters specific to TagsData
          fromFirestore: TagsData.fromFirestore,
          toFirestore: (data, options) => data.toFirestore(options),
          // Pass schema details if needed by base class features (like defaults)
          schema: const { // Example schema structure - adjust if BaseCollectionRef uses it differently
            'fields': {
              'label': { 'defaultValue': null },
            },
          },
        );

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /// Creates a new TagsQueryBuilder instance for this collection.
  TagsQueryBuilder query() {
    // Returns the specific generated QueryBuilder
    return TagsQueryBuilder(
      firestore: firestore, // Pass firestore instance
      collectionRef: ref, // Pass the typed collection reference
    );
  }

  /// Creates a new TagsUpdateBuilder instance for the document with the given ID.
  TagsUpdateBuilder update(String id) {
    // Returns the specific generated UpdateBuilder
    return TagsUpdateBuilder(docRef: doc(id)); // Pass the typed document reference
  }

  // --- Subcollection Accessors ---


  // --- Custom Methods Placeholder ---
}