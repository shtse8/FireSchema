/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  DocumentReference,
  // updateDoc, // Handled by base class commit()
  FieldValue, // Keep for potential direct use if needed, though base provides helpers
  Timestamp,  // Needed for timestamp field setters
  // DocumentReference, // Needed for reference field setters (Already imported above)
  // serverTimestamp, // Handled by base class helper _serverTimestamp()
  // increment, // Handled by base class helper _increment()
  // arrayUnion, // Handled by base class helper _arrayUnion()
  // arrayRemove, // Handled by base class helper _arrayRemove()
  // deleteField, // Handled by base class helper _deleteField()
} from 'firebase/firestore';
// Runtime Imports
import { BaseUpdateBuilder } from '@fireschema/ts-runtime'; // Adjust path/package name as needed

// Local Imports
import { ItemsData } from './items.types.js';













/**
 * A typed builder for creating update operations for 'items' documents, extending BaseUpdateBuilder.
 */
export class ItemsUpdateBuilder extends BaseUpdateBuilder<ItemsData> {

  // Constructor is inherited from BaseUpdateBuilder
  // _docRef and _updateData are managed by the base class

  // --- Field Setters ---






  /** Sets the value for the 'name' field. */
  setName(value: string | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('name', value);
  }











  /** Sets the value for the 'value' field. */
  setValue(value: number | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('value', value);
  }



  /** Atomically increments the 'value' field. */
  incrementValue(value: number): this { // Remove 'set' prefix for atomic ops
    return this._increment('value', value);
  }




  /** Deletes the 'value' field. */
  deleteValue(): this { // Remove 'set' prefix
    return this._deleteField('value');
  }






  /** Sets the value for the 'createdAt' field. */
  setCreatedAt(value: Timestamp | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('createdAt', value);
  }





  /** Sets the 'createdAt' field to the server timestamp. */
  setCreatedAtToServerTimestamp(): this { // Keep 'set' prefix for this specific operation
    return this._serverTimestamp('createdAt');
  }







  /** Sets the value for the 'address' field. */
  setAddress(value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } } | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('address', value);
  }






  /** Deletes the 'address' field. */
  deleteAddress(): this { // Remove 'set' prefix
    return this._deleteField('address');
  }






  /** Sets the value for the 'address.street' field. */
  setAddressStreet(value: string | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('address.street', value);
  }











  /** Sets the value for the 'address.city' field. */
  setAddressCity(value: string | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('address.city', value);
  }











  /** Sets the value for the 'address.zip' field. */
  setAddressZip(value: string | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('address.zip', value);
  }






  /** Deletes the 'address.zip' field. */
  deleteAddressZip(): this { // Remove 'set' prefix
    return this._deleteField('address.zip');
  }






  /** Sets the value for the 'address.coords' field. */
  setAddressCoords(value: { lat: number; lon: number } | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('address.coords', value);
  }






  /** Deletes the 'address.coords' field. */
  deleteAddressCoords(): this { // Remove 'set' prefix
    return this._deleteField('address.coords');
  }






  /** Sets the value for the 'address.coords.lat' field. */
  setAddressCoordsLat(value: number | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('address.coords.lat', value);
  }



  /** Atomically increments the 'address.coords.lat' field. */
  incrementAddressCoordsLat(value: number): this { // Remove 'set' prefix for atomic ops
    return this._increment('address.coords.lat', value);
  }









  /** Sets the value for the 'address.coords.lon' field. */
  setAddressCoordsLon(value: number | FieldValue): this {
    // Use the pre-calculated field path and method name
    return this._set('address.coords.lon', value);
  }



  /** Atomically increments the 'address.coords.lon' field. */
  incrementAddressCoordsLon(value: number): this { // Remove 'set' prefix for atomic ops
    return this._increment('address.coords.lon', value);
  }






  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
  // Example: markAsRead() { return this._set('read', true); }
}