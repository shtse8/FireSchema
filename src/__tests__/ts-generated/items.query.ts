/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  Firestore,
  CollectionReference,
  // Query, // Handled by base class
  // QueryConstraint, // Handled by base class
  // query, // Handled by base class
  // where as firestoreWhere, // Handled by base class _where
  // orderBy, // Handled by base class
  // limit, // Handled by base class
  // getDocs, // Handled by base class get() / getSnapshot()
  // limitToLast, // Handled by base class
  // startAt, // Handled by base class
  // startAfter, // Handled by base class
  // endAt, // Handled by base class
  // endBefore, // Handled by base class
  DocumentSnapshot, // Needed for cursor method signatures in base class
  WhereFilterOp, // Needed for where method signatures
  OrderByDirection, // Needed for orderBy signature in base class
  Timestamp,        // Needed for timestamp field queries
  DocumentReference // Needed for reference field queries
} from 'firebase/firestore';
// Runtime Imports
import { BaseQueryBuilder } from '@fireschema/ts-runtime'; // Adjust path/package name as needed

// Local Imports
import { ItemsData } from './items.types.js';













/**
 * A typed query builder for the 'items' collection, extending BaseQueryBuilder.
 */
export class ItemsQueryBuilder extends BaseQueryBuilder<ItemsData> {

  // Constructor is inherited from BaseQueryBuilder

  // --- Field-specific Where Methods ---
  // Overloads for 'name' field type safety based on operator
  whereName(op: '==', value: string): this;
  whereName(op: '!=', value: string): this;
  whereName(op: '<', value: string): this;
  whereName(op: '<=', value: string): this;
  whereName(op: '>', value: string): this;
  whereName(op: '>=', value: string): this;
  whereName(op: 'in', value: string[]): this;
  whereName(op: 'not-in', value: string[]): this;
  // Implementation signature for 'name'
  whereName(
    op: WhereFilterOp, // Use WhereFilterOp for implementation signature
    value: any   // Use any for implementation signature
  ): this {
    // Call the protected _where method from the base class
    return this._where('name', op, value);
  }
  // Overloads for 'value' field type safety based on operator
  whereValue(op: '==', value: number): this;
  whereValue(op: '!=', value: number): this;
  whereValue(op: '<', value: number): this;
  whereValue(op: '<=', value: number): this;
  whereValue(op: '>', value: number): this;
  whereValue(op: '>=', value: number): this;
  whereValue(op: 'in', value: number[]): this;
  whereValue(op: 'not-in', value: number[]): this;
  // Implementation signature for 'value'
  whereValue(
    op: WhereFilterOp, // Use WhereFilterOp for implementation signature
    value: any   // Use any for implementation signature
  ): this {
    // Call the protected _where method from the base class
    return this._where('value', op, value);
  }
  // Overloads for 'createdAt' field type safety based on operator
  whereCreatedAt(op: '==', value: Timestamp): this;
  whereCreatedAt(op: '!=', value: Timestamp): this;
  whereCreatedAt(op: '<', value: Timestamp): this;
  whereCreatedAt(op: '<=', value: Timestamp): this;
  whereCreatedAt(op: '>', value: Timestamp): this;
  whereCreatedAt(op: '>=', value: Timestamp): this;
  whereCreatedAt(op: 'in', value: Timestamp[]): this;
  whereCreatedAt(op: 'not-in', value: Timestamp[]): this;
  // Implementation signature for 'createdAt'
  whereCreatedAt(
    op: WhereFilterOp, // Use WhereFilterOp for implementation signature
    value: any   // Use any for implementation signature
  ): this {
    // Call the protected _where method from the base class
    return this._where('createdAt', op, value);
  }
  // Overloads for 'address' field type safety based on operator
  whereAddress(op: '==', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }): this;
  whereAddress(op: '!=', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }): this;
  whereAddress(op: 'in', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }[]): this;
  whereAddress(op: 'not-in', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }[]): this;
  // Implementation signature for 'address'
  whereAddress(
    op: WhereFilterOp, // Use WhereFilterOp for implementation signature
    value: any   // Use any for implementation signature
  ): this {
    // Call the protected _where method from the base class
    return this._where('address', op, value);
  }
  // --- End Field-specific Where Methods ---

  // Methods like orderBy(), limit(), limitToLast(), startAt(), startAfter(),
  // endBefore(), endAt(), get(), getSnapshot() are inherited from BaseQueryBuilder.

  // --- Custom Query Methods Placeholder ---
  // Example: findByStatus(status: string) { return this._where('status', '==', status); }
}