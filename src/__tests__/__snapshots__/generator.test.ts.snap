// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: items.collection.ts-admin 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as AdminFirestore, DocumentReference as AdminDocumentReference, DocumentData as AdminDocumentData } from 'firebase-admin/firestore';

// Runtime Imports - Base class and generic types
import { BaseCollectionRef } from '@shtse8/fireschema-runtime';
// Ensure all needed generic types are imported
import type { FirestoreLike, DocumentReferenceLike, CollectionReferenceLike, CollectionSchema, FieldSchema, DocumentDataLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { ItemsData } from './items.types.js';
import { ItemsQueryBuilder } from './items.query.js';
import { ItemsUpdateBuilder } from './items.update.js';




import { TagsCollection } from './items/{itemsId}/tags.collection.js';



// Define types for data manipulation.
type ItemsAddData = {
  name: ItemsData['name'];
  value?: ItemsData['value'];
  createdAt?: ItemsData['createdAt'];
  tagsArray?: ItemsData['tagsArray'];
  address?: ItemsData['address'];
};

/**
 * Typed reference to the 'items' collection, extending BaseCollectionRef.
 */
export class ItemsCollection extends BaseCollectionRef<ItemsData, ItemsAddData> {

  /**
   * @param firestore The Firestore instance (client or admin).
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  // Simplified constructor: Accepts only firestore and optional parentRef
  constructor(
    firestore: FirestoreLike,
    parentRef?: DocumentReferenceLike<DocumentDataLike> // Use generic type
  ) {
    // Process fields to create schema for runtime base class
    const processedFields: Record<string, FieldSchema> = {};
    
      processedFields['name'] = {
        
      };
    
      processedFields['value'] = {
        
      };
    
      processedFields['createdAt'] = {
        
        defaultValue: "serverTimestamp",
        
      };
    
      processedFields['tagsArray'] = {
        
      };
    
      processedFields['address'] = {
        
      };
    
    const schemaForRuntime: CollectionSchema = { fields: processedFields };

    // Call the base class constructor, providing the hardcoded collectionId
    // Base class constructor: (firestore, collectionId, schema?, parentRef?)
    super(firestore, 'items', schemaForRuntime, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   */
  update(id: string): ItemsUpdateBuilder {
    return new ItemsUpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   */
  query(): ItemsQueryBuilder {
    return new ItemsQueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---




  /**
   * Access the 'tags' subcollection for a specific document.
   */
  tags(documentId: string): TagsCollection {
    // Process subcollection fields
    const processedSubFields: Record<string, FieldSchema> = {};
    
      processedSubFields['label'] = {
        
      };
    
    const subSchema: CollectionSchema = { fields: processedSubFields };
    // Use the subCollection helper from BaseCollectionRef
    // It expects: parentId, subCollectionId, SubCollectionClass, subSchema?
    return this.subCollection(documentId, 'tags', TagsCollection, subSchema);
  }



  // --- Custom Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: items.query.ts-admin 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as AdminFirestore, CollectionReference as AdminCollectionReference, DocumentSnapshot as AdminDocumentSnapshot, Timestamp as AdminTimestamp, DocumentReference as AdminDocumentReference, WhereFilterOp as AdminWhereFilterOp, OrderByDirection as AdminOrderByDirection } from 'firebase-admin/firestore';

// Runtime Imports - Base class and generic types
import { BaseQueryBuilder } from '@shtse8/fireschema-runtime'; // Use correct package name
import type { FirestoreLike, CollectionReferenceLike, DocumentSnapshotLike, TimestampLike, DocumentReferenceLike, WhereFilterOpLike, OrderByDirectionLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { ItemsData } from './items.types.js';















/**
 * A typed query builder for the 'items' collection, extending BaseQueryBuilder.
 */
export class ItemsQueryBuilder extends BaseQueryBuilder<ItemsData> {

  // Constructor inherited from BaseQueryBuilder, accepts FirestoreLike and CollectionReferenceLike

  // --- Field-specific Where Methods ---
  // Overloads for 'name' field type safety based on operator
   
  whereName(op: '==', value: string): this;
   
  whereName(op: '!=', value: string): this;
   
  whereName(op: '<', value: string): this;
   
  whereName(op: '<=', value: string): this;
   
  whereName(op: '>', value: string): this;
   
  whereName(op: '>=', value: string): this;
   
  whereName(op: 'in', value: string[]): this;
   
  whereName(op: 'not-in', value: string[]): this;
  // Implementation signature for 'name'
  whereName(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('name', op, value);
  }
  // Overloads for 'value' field type safety based on operator
   
  whereValue(op: '==', value: number): this;
   
  whereValue(op: '!=', value: number): this;
   
  whereValue(op: '<', value: number): this;
   
  whereValue(op: '<=', value: number): this;
   
  whereValue(op: '>', value: number): this;
   
  whereValue(op: '>=', value: number): this;
   
  whereValue(op: 'in', value: number[]): this;
   
  whereValue(op: 'not-in', value: number[]): this;
  // Implementation signature for 'value'
  whereValue(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('value', op, value);
  }
  // Overloads for 'createdAt' field type safety based on operator
   
  whereCreatedAt(op: '==', value: TimestampLike): this;
   
  whereCreatedAt(op: '!=', value: TimestampLike): this;
   
  whereCreatedAt(op: '<', value: TimestampLike): this;
   
  whereCreatedAt(op: '<=', value: TimestampLike): this;
   
  whereCreatedAt(op: '>', value: TimestampLike): this;
   
  whereCreatedAt(op: '>=', value: TimestampLike): this;
   
  whereCreatedAt(op: 'in', value: TimestampLike[]): this;
   
  whereCreatedAt(op: 'not-in', value: TimestampLike[]): this;
  // Implementation signature for 'createdAt'
  whereCreatedAt(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('createdAt', op, value);
  }
  // Overloads for 'tagsArray' field type safety based on operator
   
  whereTagsArray(op: 'array-contains', value: string): this;
   
  whereTagsArray(op: 'array-contains-any', value: string[]): this;
   
  whereTagsArray(op: 'in', value: string[][]): this;
   
  whereTagsArray(op: 'not-in', value: string[][]): this;
  // Implementation signature for 'tagsArray'
  whereTagsArray(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('tagsArray', op, value);
  }
  // Overloads for 'address' field type safety based on operator
   
  whereAddress(op: '==', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }): this;
   
  whereAddress(op: '!=', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }): this;
   
  whereAddress(op: 'in', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }[]): this;
   
  whereAddress(op: 'not-in', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }[]): this;
  // Implementation signature for 'address'
  whereAddress(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('address', op, value);
  }
  // --- End Field-specific Where Methods ---

  // Methods like orderBy(), limit(), limitToLast(), startAt(), startAfter(),
  // endBefore(), endAt(), get(), getSnapshot() are inherited from BaseQueryBuilder.

  // --- Custom Query Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: items.types.ts-admin 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { TimestampLike, GeoPointLike, DocumentReferenceLike, DocumentDataLike } from '@shtse8/fireschema-runtime';















/**
 * Represents the structure of a 'Items' document using generic types.
 * Description: A collection of test items.
 */
export interface ItemsData {
  /**
   * name (string, required)

   */
   
  name: string;
  /**
   * value (number)

   */
   
  value?: number;
  /**
   * createdAt (timestamp, required)

   */
   
  createdAt: TimestampLike;
  /**
   * tagsArray (array)

   */
   
  tagsArray?: string[];
  /**
   * address (map)

   */
   
  address?: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } };
}

// Potential future additions:
// - A class wrapper for data with helper methods?
// - Separate types for creation vs reading?"
`;

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: items.update.ts-admin 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */

// Runtime Imports - Base class and generic types
import { BaseUpdateBuilder } from '@shtse8/fireschema-runtime'; // Correct package name
import type { DocumentReferenceLike, FieldValueLike, TimestampLike, GeoPointLike } from '@shtse8/fireschema-runtime'; // Import generic types

// Local Imports
import { ItemsData } from './items.types.js';















/**
 * A typed builder for creating update operations for 'items' documents, extending BaseUpdateBuilder.
 */
export class ItemsUpdateBuilder extends BaseUpdateBuilder<ItemsData> {

  // Constructor inherited from BaseUpdateBuilder (accepts DocumentReferenceLike)

  // --- Field Setters ---






  /** Sets the value for the 'name' field. */
  setName(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('name', value);
  }











  /** Sets the value for the 'value' field. */
  setValue(value: number | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('value', value);
  }



  /** Atomically increments the 'value' field. */
  incrementValue(value: number): this {
    return this._increment('value', value);
  }




  /** Deletes the 'value' field. */
  deleteValue(): this {
    return this._deleteField('value');
  }






  /** Sets the value for the 'createdAt' field. */
  setCreatedAt(value: TimestampLike | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('createdAt', value);
  }





  /** Sets the 'createdAt' field to the server timestamp. */
  setCreatedAtToServerTimestamp(): this {
    return this._serverTimestamp('createdAt');
  }







  /** Sets the value for the 'tagsArray' field. */
  setTagsArray(value: string[] | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('tagsArray', value);
  }





  /** Atomically adds elements to the 'tagsArray' array field. */
  arrayUnionTagsArray(values: string[] | string): this {
    return this._arrayUnion('tagsArray', Array.isArray(values) ? values : [values]);
  }

  /** Atomically removes elements from the 'tagsArray' array field. */
  arrayRemoveTagsArray(values: string[] | string): this {
    return this._arrayRemove('tagsArray', Array.isArray(values) ? values : [values]);
  }



  /** Deletes the 'tagsArray' field. */
  deleteTagsArray(): this {
    return this._deleteField('tagsArray');
  }






  /** Sets the value for the 'address' field. */
  setAddress(value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } } | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address', value);
  }






  /** Deletes the 'address' field. */
  deleteAddress(): this {
    return this._deleteField('address');
  }






  /** Sets the value for the 'address.street' field. */
  setAddressStreet(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.street', value);
  }











  /** Sets the value for the 'address.city' field. */
  setAddressCity(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.city', value);
  }











  /** Sets the value for the 'address.zip' field. */
  setAddressZip(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.zip', value);
  }






  /** Deletes the 'address.zip' field. */
  deleteAddressZip(): this {
    return this._deleteField('address.zip');
  }






  /** Sets the value for the 'address.coords' field. */
  setAddressCoords(value: { lat: number; lon: number } | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.coords', value);
  }






  /** Deletes the 'address.coords' field. */
  deleteAddressCoords(): this {
    return this._deleteField('address.coords');
  }






  /** Sets the value for the 'address.coords.lat' field. */
  setAddressCoordsLat(value: number | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.coords.lat', value);
  }



  /** Atomically increments the 'address.coords.lat' field. */
  incrementAddressCoordsLat(value: number): this {
    return this._increment('address.coords.lat', value);
  }









  /** Sets the value for the 'address.coords.lon' field. */
  setAddressCoordsLon(value: number | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.coords.lon', value);
  }



  /** Atomically increments the 'address.coords.lon' field. */
  incrementAddressCoordsLon(value: number): this {
    return this._increment('address.coords.lon', value);
  }






  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: items/_itemsId_/tags.collection.ts-admin 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as AdminFirestore, DocumentReference as AdminDocumentReference, DocumentData as AdminDocumentData } from 'firebase-admin/firestore';

// Runtime Imports - Base class and generic types
import { BaseCollectionRef } from '@shtse8/fireschema-runtime';
// Ensure all needed generic types are imported
import type { FirestoreLike, DocumentReferenceLike, CollectionReferenceLike, CollectionSchema, FieldSchema, DocumentDataLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { TagsData } from './tags.types.js';
import { TagsQueryBuilder } from './tags.query.js';
import { TagsUpdateBuilder } from './tags.update.js';



// Define types for data manipulation.
type TagsAddData = {
  label: TagsData['label'];
};

/**
 * Typed reference to the 'tags' collection, extending BaseCollectionRef.
 */
export class TagsCollection extends BaseCollectionRef<TagsData, TagsAddData> {

  /**
   * @param firestore The Firestore instance (client or admin).
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  // Simplified constructor: Accepts only firestore and optional parentRef
  constructor(
    firestore: FirestoreLike,
    parentRef?: DocumentReferenceLike<DocumentDataLike> // Use generic type
  ) {
    // Process fields to create schema for runtime base class
    const processedFields: Record<string, FieldSchema> = {};
    
      processedFields['label'] = {
        
      };
    
    const schemaForRuntime: CollectionSchema = { fields: processedFields };

    // Call the base class constructor, providing the hardcoded collectionId
    // Base class constructor: (firestore, collectionId, schema?, parentRef?)
    super(firestore, 'tags', schemaForRuntime, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   */
  update(id: string): TagsUpdateBuilder {
    return new TagsUpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   */
  query(): TagsQueryBuilder {
    return new TagsQueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---


  // --- Custom Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: items/_itemsId_/tags.query.ts-admin 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as AdminFirestore, CollectionReference as AdminCollectionReference, DocumentSnapshot as AdminDocumentSnapshot, Timestamp as AdminTimestamp, DocumentReference as AdminDocumentReference, WhereFilterOp as AdminWhereFilterOp, OrderByDirection as AdminOrderByDirection } from 'firebase-admin/firestore';

// Runtime Imports - Base class and generic types
import { BaseQueryBuilder } from '@shtse8/fireschema-runtime'; // Use correct package name
import type { FirestoreLike, CollectionReferenceLike, DocumentSnapshotLike, TimestampLike, DocumentReferenceLike, WhereFilterOpLike, OrderByDirectionLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { TagsData } from './tags.types.js';







/**
 * A typed query builder for the 'tags' collection, extending BaseQueryBuilder.
 */
export class TagsQueryBuilder extends BaseQueryBuilder<TagsData> {

  // Constructor inherited from BaseQueryBuilder, accepts FirestoreLike and CollectionReferenceLike

  // --- Field-specific Where Methods ---
  // Overloads for 'label' field type safety based on operator
   
  whereLabel(op: '==', value: string): this;
   
  whereLabel(op: '!=', value: string): this;
   
  whereLabel(op: '<', value: string): this;
   
  whereLabel(op: '<=', value: string): this;
   
  whereLabel(op: '>', value: string): this;
   
  whereLabel(op: '>=', value: string): this;
   
  whereLabel(op: 'in', value: string[]): this;
   
  whereLabel(op: 'not-in', value: string[]): this;
  // Implementation signature for 'label'
  whereLabel(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('label', op, value);
  }
  // --- End Field-specific Where Methods ---

  // Methods like orderBy(), limit(), limitToLast(), startAt(), startAfter(),
  // endBefore(), endAt(), get(), getSnapshot() are inherited from BaseQueryBuilder.

  // --- Custom Query Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: items/_itemsId_/tags.types.ts-admin 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { TimestampLike, GeoPointLike, DocumentReferenceLike, DocumentDataLike } from '@shtse8/fireschema-runtime';







/**
 * Represents the structure of a 'Tags' document using generic types.
 * Description: Tags for an item.
 */
export interface TagsData {
  /**
   * label (string, required)

   */
   
  label: string;
}

// Potential future additions:
// - A class wrapper for data with helper methods?
// - Separate types for creation vs reading?"
`;

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: items/_itemsId_/tags.update.ts-admin 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */

// Runtime Imports - Base class and generic types
import { BaseUpdateBuilder } from '@shtse8/fireschema-runtime'; // Correct package name
import type { DocumentReferenceLike, FieldValueLike, TimestampLike, GeoPointLike } from '@shtse8/fireschema-runtime'; // Import generic types

// Local Imports
import { TagsData } from './tags.types.js';







/**
 * A typed builder for creating update operations for 'tags' documents, extending BaseUpdateBuilder.
 */
export class TagsUpdateBuilder extends BaseUpdateBuilder<TagsData> {

  // Constructor inherited from BaseUpdateBuilder (accepts DocumentReferenceLike)

  // --- Field Setters ---






  /** Sets the value for the 'label' field. */
  setLabel(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('label', value);
  }








  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript admin files matching snapshots: package.json-admin 1`] = `
"{
  "name": "@test/generated-ts-admin",
  "version": "1.0.0",
  "description": "Generated Firestore ODM for @test/generated-ts-admin (TS Admin)",
  "type": "module",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "scripts": {
    "clean": "npx rimraf dist",
    "build": "bun run clean && tsc -b",
    "test": "jest"
  },
  "peerDependencies": {
    "@shtse8/fireschema-runtime": "^0.1.0",
    "firebase-admin": "^11.0.0 || ^12.0.0"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "firebase-admin": "^12.0.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.3.1",
    "typescript": "^5.0.0"
  }
}"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: items.collection.ts-client 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as ClientFirestore, DocumentReference as ClientDocumentReference, DocumentData as ClientDocumentData } from 'firebase/firestore';

// Runtime Imports - Base class and generic types
import { BaseCollectionRef } from '@shtse8/fireschema-runtime';
// Ensure all needed generic types are imported
import type { FirestoreLike, DocumentReferenceLike, CollectionReferenceLike, CollectionSchema, FieldSchema, DocumentDataLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { ItemsData } from './items.types.js';
import { ItemsQueryBuilder } from './items.query.js';
import { ItemsUpdateBuilder } from './items.update.js';




import { TagsCollection } from './items/{itemsId}/tags.collection.js';



// Define types for data manipulation.
type ItemsAddData = {
  name: ItemsData['name'];
  value?: ItemsData['value'];
  createdAt?: ItemsData['createdAt'];
  tagsArray?: ItemsData['tagsArray'];
  address?: ItemsData['address'];
};

/**
 * Typed reference to the 'items' collection, extending BaseCollectionRef.
 */
export class ItemsCollection extends BaseCollectionRef<ItemsData, ItemsAddData> {

  /**
   * @param firestore The Firestore instance (client or admin).
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  // Simplified constructor: Accepts only firestore and optional parentRef
  constructor(
    firestore: FirestoreLike,
    parentRef?: DocumentReferenceLike<DocumentDataLike> // Use generic type
  ) {
    // Process fields to create schema for runtime base class
    const processedFields: Record<string, FieldSchema> = {};
    
      processedFields['name'] = {
        
      };
    
      processedFields['value'] = {
        
      };
    
      processedFields['createdAt'] = {
        
        defaultValue: "serverTimestamp",
        
      };
    
      processedFields['tagsArray'] = {
        
      };
    
      processedFields['address'] = {
        
      };
    
    const schemaForRuntime: CollectionSchema = { fields: processedFields };

    // Call the base class constructor, providing the hardcoded collectionId
    // Base class constructor: (firestore, collectionId, schema?, parentRef?)
    super(firestore, 'items', schemaForRuntime, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   */
  update(id: string): ItemsUpdateBuilder {
    return new ItemsUpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   */
  query(): ItemsQueryBuilder {
    return new ItemsQueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---




  /**
   * Access the 'tags' subcollection for a specific document.
   */
  tags(documentId: string): TagsCollection {
    // Process subcollection fields
    const processedSubFields: Record<string, FieldSchema> = {};
    
      processedSubFields['label'] = {
        
      };
    
    const subSchema: CollectionSchema = { fields: processedSubFields };
    // Use the subCollection helper from BaseCollectionRef
    // It expects: parentId, subCollectionId, SubCollectionClass, subSchema?
    return this.subCollection(documentId, 'tags', TagsCollection, subSchema);
  }



  // --- Custom Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: items.query.ts-client 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as ClientFirestore, CollectionReference as ClientCollectionReference, DocumentSnapshot as ClientDocumentSnapshot, Timestamp as ClientTimestamp, DocumentReference as ClientDocumentReference, WhereFilterOp as ClientWhereFilterOp, OrderByDirection as ClientOrderByDirection } from 'firebase/firestore';

// Runtime Imports - Base class and generic types
import { BaseQueryBuilder } from '@shtse8/fireschema-runtime'; // Use correct package name
import type { FirestoreLike, CollectionReferenceLike, DocumentSnapshotLike, TimestampLike, DocumentReferenceLike, WhereFilterOpLike, OrderByDirectionLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { ItemsData } from './items.types.js';















/**
 * A typed query builder for the 'items' collection, extending BaseQueryBuilder.
 */
export class ItemsQueryBuilder extends BaseQueryBuilder<ItemsData> {

  // Constructor inherited from BaseQueryBuilder, accepts FirestoreLike and CollectionReferenceLike

  // --- Field-specific Where Methods ---
  // Overloads for 'name' field type safety based on operator
   
  whereName(op: '==', value: string): this;
   
  whereName(op: '!=', value: string): this;
   
  whereName(op: '<', value: string): this;
   
  whereName(op: '<=', value: string): this;
   
  whereName(op: '>', value: string): this;
   
  whereName(op: '>=', value: string): this;
   
  whereName(op: 'in', value: string[]): this;
   
  whereName(op: 'not-in', value: string[]): this;
  // Implementation signature for 'name'
  whereName(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('name', op, value);
  }
  // Overloads for 'value' field type safety based on operator
   
  whereValue(op: '==', value: number): this;
   
  whereValue(op: '!=', value: number): this;
   
  whereValue(op: '<', value: number): this;
   
  whereValue(op: '<=', value: number): this;
   
  whereValue(op: '>', value: number): this;
   
  whereValue(op: '>=', value: number): this;
   
  whereValue(op: 'in', value: number[]): this;
   
  whereValue(op: 'not-in', value: number[]): this;
  // Implementation signature for 'value'
  whereValue(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('value', op, value);
  }
  // Overloads for 'createdAt' field type safety based on operator
   
  whereCreatedAt(op: '==', value: TimestampLike): this;
   
  whereCreatedAt(op: '!=', value: TimestampLike): this;
   
  whereCreatedAt(op: '<', value: TimestampLike): this;
   
  whereCreatedAt(op: '<=', value: TimestampLike): this;
   
  whereCreatedAt(op: '>', value: TimestampLike): this;
   
  whereCreatedAt(op: '>=', value: TimestampLike): this;
   
  whereCreatedAt(op: 'in', value: TimestampLike[]): this;
   
  whereCreatedAt(op: 'not-in', value: TimestampLike[]): this;
  // Implementation signature for 'createdAt'
  whereCreatedAt(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('createdAt', op, value);
  }
  // Overloads for 'tagsArray' field type safety based on operator
   
  whereTagsArray(op: 'array-contains', value: string): this;
   
  whereTagsArray(op: 'array-contains-any', value: string[]): this;
   
  whereTagsArray(op: 'in', value: string[][]): this;
   
  whereTagsArray(op: 'not-in', value: string[][]): this;
  // Implementation signature for 'tagsArray'
  whereTagsArray(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('tagsArray', op, value);
  }
  // Overloads for 'address' field type safety based on operator
   
  whereAddress(op: '==', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }): this;
   
  whereAddress(op: '!=', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }): this;
   
  whereAddress(op: 'in', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }[]): this;
   
  whereAddress(op: 'not-in', value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } }[]): this;
  // Implementation signature for 'address'
  whereAddress(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('address', op, value);
  }
  // --- End Field-specific Where Methods ---

  // Methods like orderBy(), limit(), limitToLast(), startAt(), startAfter(),
  // endBefore(), endAt(), get(), getSnapshot() are inherited from BaseQueryBuilder.

  // --- Custom Query Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: items.types.ts-client 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { TimestampLike, GeoPointLike, DocumentReferenceLike, DocumentDataLike } from '@shtse8/fireschema-runtime';















/**
 * Represents the structure of a 'Items' document using generic types.
 * Description: A collection of test items.
 */
export interface ItemsData {
  /**
   * name (string, required)

   */
   
  name: string;
  /**
   * value (number)

   */
   
  value?: number;
  /**
   * createdAt (timestamp, required)

   */
   
  createdAt: TimestampLike;
  /**
   * tagsArray (array)

   */
   
  tagsArray?: string[];
  /**
   * address (map)

   */
   
  address?: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } };
}

// Potential future additions:
// - A class wrapper for data with helper methods?
// - Separate types for creation vs reading?"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: items.update.ts-client 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */

// Runtime Imports - Base class and generic types
import { BaseUpdateBuilder } from '@shtse8/fireschema-runtime'; // Correct package name
import type { DocumentReferenceLike, FieldValueLike, TimestampLike, GeoPointLike } from '@shtse8/fireschema-runtime'; // Import generic types

// Local Imports
import { ItemsData } from './items.types.js';















/**
 * A typed builder for creating update operations for 'items' documents, extending BaseUpdateBuilder.
 */
export class ItemsUpdateBuilder extends BaseUpdateBuilder<ItemsData> {

  // Constructor inherited from BaseUpdateBuilder (accepts DocumentReferenceLike)

  // --- Field Setters ---






  /** Sets the value for the 'name' field. */
  setName(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('name', value);
  }











  /** Sets the value for the 'value' field. */
  setValue(value: number | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('value', value);
  }



  /** Atomically increments the 'value' field. */
  incrementValue(value: number): this {
    return this._increment('value', value);
  }




  /** Deletes the 'value' field. */
  deleteValue(): this {
    return this._deleteField('value');
  }






  /** Sets the value for the 'createdAt' field. */
  setCreatedAt(value: TimestampLike | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('createdAt', value);
  }





  /** Sets the 'createdAt' field to the server timestamp. */
  setCreatedAtToServerTimestamp(): this {
    return this._serverTimestamp('createdAt');
  }







  /** Sets the value for the 'tagsArray' field. */
  setTagsArray(value: string[] | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('tagsArray', value);
  }





  /** Atomically adds elements to the 'tagsArray' array field. */
  arrayUnionTagsArray(values: string[] | string): this {
    return this._arrayUnion('tagsArray', Array.isArray(values) ? values : [values]);
  }

  /** Atomically removes elements from the 'tagsArray' array field. */
  arrayRemoveTagsArray(values: string[] | string): this {
    return this._arrayRemove('tagsArray', Array.isArray(values) ? values : [values]);
  }



  /** Deletes the 'tagsArray' field. */
  deleteTagsArray(): this {
    return this._deleteField('tagsArray');
  }






  /** Sets the value for the 'address' field. */
  setAddress(value: { street: string; city: string; zip?: string; coords?: { lat: number; lon: number } } | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address', value);
  }






  /** Deletes the 'address' field. */
  deleteAddress(): this {
    return this._deleteField('address');
  }






  /** Sets the value for the 'address.street' field. */
  setAddressStreet(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.street', value);
  }











  /** Sets the value for the 'address.city' field. */
  setAddressCity(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.city', value);
  }











  /** Sets the value for the 'address.zip' field. */
  setAddressZip(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.zip', value);
  }






  /** Deletes the 'address.zip' field. */
  deleteAddressZip(): this {
    return this._deleteField('address.zip');
  }






  /** Sets the value for the 'address.coords' field. */
  setAddressCoords(value: { lat: number; lon: number } | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.coords', value);
  }






  /** Deletes the 'address.coords' field. */
  deleteAddressCoords(): this {
    return this._deleteField('address.coords');
  }






  /** Sets the value for the 'address.coords.lat' field. */
  setAddressCoordsLat(value: number | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.coords.lat', value);
  }



  /** Atomically increments the 'address.coords.lat' field. */
  incrementAddressCoordsLat(value: number): this {
    return this._increment('address.coords.lat', value);
  }









  /** Sets the value for the 'address.coords.lon' field. */
  setAddressCoordsLon(value: number | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('address.coords.lon', value);
  }



  /** Atomically increments the 'address.coords.lon' field. */
  incrementAddressCoordsLon(value: number): this {
    return this._increment('address.coords.lon', value);
  }






  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: items/_itemsId_/tags.collection.ts-client 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as ClientFirestore, DocumentReference as ClientDocumentReference, DocumentData as ClientDocumentData } from 'firebase/firestore';

// Runtime Imports - Base class and generic types
import { BaseCollectionRef } from '@shtse8/fireschema-runtime';
// Ensure all needed generic types are imported
import type { FirestoreLike, DocumentReferenceLike, CollectionReferenceLike, CollectionSchema, FieldSchema, DocumentDataLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { TagsData } from './tags.types.js';
import { TagsQueryBuilder } from './tags.query.js';
import { TagsUpdateBuilder } from './tags.update.js';



// Define types for data manipulation.
type TagsAddData = {
  label: TagsData['label'];
};

/**
 * Typed reference to the 'tags' collection, extending BaseCollectionRef.
 */
export class TagsCollection extends BaseCollectionRef<TagsData, TagsAddData> {

  /**
   * @param firestore The Firestore instance (client or admin).
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  // Simplified constructor: Accepts only firestore and optional parentRef
  constructor(
    firestore: FirestoreLike,
    parentRef?: DocumentReferenceLike<DocumentDataLike> // Use generic type
  ) {
    // Process fields to create schema for runtime base class
    const processedFields: Record<string, FieldSchema> = {};
    
      processedFields['label'] = {
        
      };
    
    const schemaForRuntime: CollectionSchema = { fields: processedFields };

    // Call the base class constructor, providing the hardcoded collectionId
    // Base class constructor: (firestore, collectionId, schema?, parentRef?)
    super(firestore, 'tags', schemaForRuntime, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   */
  update(id: string): TagsUpdateBuilder {
    return new TagsUpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   */
  query(): TagsQueryBuilder {
    return new TagsQueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---


  // --- Custom Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: items/_itemsId_/tags.query.ts-client 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as ClientFirestore, CollectionReference as ClientCollectionReference, DocumentSnapshot as ClientDocumentSnapshot, Timestamp as ClientTimestamp, DocumentReference as ClientDocumentReference, WhereFilterOp as ClientWhereFilterOp, OrderByDirection as ClientOrderByDirection } from 'firebase/firestore';

// Runtime Imports - Base class and generic types
import { BaseQueryBuilder } from '@shtse8/fireschema-runtime'; // Use correct package name
import type { FirestoreLike, CollectionReferenceLike, DocumentSnapshotLike, TimestampLike, DocumentReferenceLike, WhereFilterOpLike, OrderByDirectionLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { TagsData } from './tags.types.js';







/**
 * A typed query builder for the 'tags' collection, extending BaseQueryBuilder.
 */
export class TagsQueryBuilder extends BaseQueryBuilder<TagsData> {

  // Constructor inherited from BaseQueryBuilder, accepts FirestoreLike and CollectionReferenceLike

  // --- Field-specific Where Methods ---
  // Overloads for 'label' field type safety based on operator
   
  whereLabel(op: '==', value: string): this;
   
  whereLabel(op: '!=', value: string): this;
   
  whereLabel(op: '<', value: string): this;
   
  whereLabel(op: '<=', value: string): this;
   
  whereLabel(op: '>', value: string): this;
   
  whereLabel(op: '>=', value: string): this;
   
  whereLabel(op: 'in', value: string[]): this;
   
  whereLabel(op: 'not-in', value: string[]): this;
  // Implementation signature for 'label'
  whereLabel(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('label', op, value);
  }
  // --- End Field-specific Where Methods ---

  // Methods like orderBy(), limit(), limitToLast(), startAt(), startAfter(),
  // endBefore(), endAt(), get(), getSnapshot() are inherited from BaseQueryBuilder.

  // --- Custom Query Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: items/_itemsId_/tags.types.ts-client 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { TimestampLike, GeoPointLike, DocumentReferenceLike, DocumentDataLike } from '@shtse8/fireschema-runtime';







/**
 * Represents the structure of a 'Tags' document using generic types.
 * Description: Tags for an item.
 */
export interface TagsData {
  /**
   * label (string, required)

   */
   
  label: string;
}

// Potential future additions:
// - A class wrapper for data with helper methods?
// - Separate types for creation vs reading?"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: items/_itemsId_/tags.update.ts-client 1`] = `
"/**
 * Generated by firestore-odm
 * Do not edit manually.
 */

// Runtime Imports - Base class and generic types
import { BaseUpdateBuilder } from '@shtse8/fireschema-runtime'; // Correct package name
import type { DocumentReferenceLike, FieldValueLike, TimestampLike, GeoPointLike } from '@shtse8/fireschema-runtime'; // Import generic types

// Local Imports
import { TagsData } from './tags.types.js';







/**
 * A typed builder for creating update operations for 'tags' documents, extending BaseUpdateBuilder.
 */
export class TagsUpdateBuilder extends BaseUpdateBuilder<TagsData> {

  // Constructor inherited from BaseUpdateBuilder (accepts DocumentReferenceLike)

  // --- Field Setters ---






  /** Sets the value for the 'label' field. */
  setLabel(value: string | FieldValueLike): this { // method.fieldType includes FieldValueLike
    return this._set('label', value);
  }








  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
}"
`;

exports[`FireSchema Generator should generate TypeScript client files matching snapshots: package.json-client 1`] = `
"{
  "name": "@test/generated-ts-client",
  "version": "1.0.0",
  "description": "Generated Firestore ODM for @test/generated-ts-client (TS Client)",
  "type": "module",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "scripts": {
    "clean": "npx rimraf dist",
    "build": "bun run clean && tsc -b",
    "test": "jest"
  },
  "peerDependencies": {
    "@shtse8/fireschema-runtime": "^0.1.0",
    "firebase": "^9.0.0 || ^10.0.0 || ^11.0.0"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "firebase": "^10.12.4",
    "jest": "^29.7.0",
    "ts-jest": "^29.3.1",
    "typescript": "^5.0.0"
  }
}"
`;
