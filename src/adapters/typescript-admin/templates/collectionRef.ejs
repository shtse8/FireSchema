/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
<% /* Import Admin SDK types */ -%>
import type { Firestore as AdminFirestore, DocumentReference as AdminDocumentReference, DocumentData as AdminDocumentData } from 'firebase-admin/firestore';

// Runtime Imports - Base class and generic types from NEW packages
import { AdminBaseCollectionRef } from '@shtse8/fireschema-ts-admin-runtime'; // Import specific admin base class
// Core types like FirestoreLike, DocumentReferenceLike etc. should be re-exported by the runtime package or imported directly if needed
// Remove old runtime import

// Local Imports
import { <%- modelName %>Data } from './<%= collection.collectionId %>.types.js';
import { <%- modelName %>QueryBuilder } from './<%= collection.collectionId %>.query.js';
import { <%- modelName %>UpdateBuilder } from './<%= collection.collectionId %>.update.js';
<%# Generate imports for subcollections %>
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
import { <%- subModelName %>Collection } from './<%= collection.collectionId %>/{<%= collection.collectionId %>Id}/<%= subId %>.collection.js';
<%   }); %>
<% } %>

// Define types for data manipulation.
type <%- modelName %>AddData = {
<% Object.entries(collection.fields).forEach(([fieldName, fieldDef]) => { -%>
<%   const isOptional = !fieldDef.required || fieldDef.defaultValue !== undefined; -%>
  <%- fieldName %><%- isOptional ? '?' : '' %>: <%- modelName %>Data['<%- fieldName %>'];
<% }); -%>
};

/**
 * Typed reference to the '<%- collection.collectionId %>' collection, extending BaseCollectionRef.
 */
export class <%- modelName %>Collection extends AdminBaseCollectionRef<<%- modelName %>Data, <%- modelName %>AddData> { // Extend specific admin base class

  /**
   * @param firestore The Firestore instance (client or admin).
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  // Simplified constructor: Accepts only firestore and optional parentRef
  constructor(
    firestore: FirestoreLike,
    parentRef?: DocumentReferenceLike<DocumentDataLike> // Use generic type
  ) {
    // Process fields to create schema for runtime base class
    const processedFields: Record<string, FieldSchema> = {};
    <% Object.entries(collection.fields).forEach(([fieldName, fieldDef]) => { %>
      processedFields['<%- fieldName %>'] = {
        <% if (fieldDef.defaultValue !== undefined) { %>
        defaultValue: <%- JSON.stringify(fieldDef.defaultValue) %>,
        <% } %>
      };
    <% }); %>
    const schemaForRuntime: CollectionSchema = { fields: processedFields };

    // Call the base class constructor, providing the hardcoded collectionId
    // Base class constructor: (firestore, collectionId, schema?, parentRef?)
    super(firestore, '<%- collection.collectionId %>', schemaForRuntime, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   */
  update(id: string): <%- modelName %>UpdateBuilder {
    return new <%- modelName %>UpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   */
  query(): <%- modelName %>QueryBuilder {
    return new <%- modelName %>QueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
<%     const subCollectionDef = collection.subcollections[subId]; %>
  /**
   * Access the '<%- subId %>' subcollection for a specific document.
   */
  <%- subId %>(documentId: string): <%- subModelName %>Collection {
    // Process subcollection fields
    const processedSubFields: Record<string, FieldSchema> = {};
    <% Object.entries(subCollectionDef.fields).forEach(([fieldName, fieldDef]) => { %>
      processedSubFields['<%- fieldName %>'] = {
        <% if (fieldDef.defaultValue !== undefined) { %>
        defaultValue: <%- JSON.stringify(fieldDef.defaultValue) %>,
        <% } %>
      };
    <% }); %>
    const subSchema: CollectionSchema = { fields: processedSubFields };
    // Use the subCollection helper from BaseCollectionRef
    // It expects: parentId, subCollectionId, SubCollectionClass, subSchema?
    return this.subCollection(documentId, '<%- subId %>', <%- subModelName %>Collection, subSchema);
  }
<%   }); %>
<% } %>

  // --- Custom Methods Placeholder ---
}