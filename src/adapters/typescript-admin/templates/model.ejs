/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
<% /* Import generic types from the runtime package */ -%>
import type { TimestampLike, GeoPointLike, DocumentReferenceLike, DocumentDataLike } from '@shtse8/fireschema-runtime';
<%# Dynamically import other Data types needed for reference fields %>
<% const referencedTypes = new Set(); %>
<% Object.values(collection.fields).forEach(field => { %>
<%   if (field.type === 'reference' && field.referenceTo) { %>
<%     referencedTypes.add(field.referenceTo); %>
<%   } %>
<% }); %>
<% referencedTypes.forEach(refType => { %>
<%   const refModelName = camelToPascalCase(refType); %>
<%   // Assuming referenced types are in the same directory structure %>
import type { <%- refModelName %>Data } from './<%- refType %>.types.js';
<% }); %>

/**
 * Represents the structure of a '<%- modelName %>' document using generic types.
 * Description: <%- collection.description || 'N/A' %>
 */
export interface <%- modelName %>Data {
<% Object.values(collection.fields).forEach(field => { -%>
  /**
   * <%- field.description || field.fieldName %> (<%- field.type %><%- field.required ? ', required' : '' %>)
<% const currentField = collection.fields[field.fieldName]; %>
<% if (currentField.type === 'string' && currentField.minLength != null) { -%>
   * @minLength <%- currentField.minLength %>
<% } -%>
<% if (currentField.type === 'string' && currentField.maxLength != null) { -%>
   * @maxLength <%- currentField.maxLength %>
<% } -%>
<% if (currentField.type === 'string' && currentField.pattern != null) { -%>
   * @pattern <%- currentField.pattern %>
<% } -%>
<% if (currentField.type === 'number' && currentField.minimum != null) { -%>
   * @minimum <%- currentField.minimum %>
<% } -%>
<% if (currentField.type === 'number' && currentField.maximum != null) { -%>
   * @maximum <%- currentField.maximum %>
<% } -%>
   */
   <%# Call the getTypeScriptType helper passed in commonData, passing options %>
  <%- field.fieldName %><%- field.required ? '' : '?' %>: <%- getTypeScriptType(field, options) %>;
<% }); -%>
}

// Potential future additions:
// - A class wrapper for data with helper methods?
// - Separate types for creation vs reading?