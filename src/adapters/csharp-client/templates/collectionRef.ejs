<%%# src/adapters/csharp-client/templates/collectionRef.ejs -%>
<%%
// Helper to generate PascalCase names
const toPascalCase = (str) => {
    if (!str) return '';
    return str.replace(/[-_](\w)/g, (_, c) => c.toUpperCase())
              .replace(/^./, (c) => c.toUpperCase());
};

// Helper to generate singular PascalCase names (basic)
const singularizePascal = (name) => {
    const singular = name.endsWith('ies') ? name.substring(0, name.length - 3) + 'y' :
                     (name.endsWith('s') && !name.endsWith('ss')) ? name.substring(0, name.length - 1) : name;
    return toPascalCase(singular);
};

const collectionPascalName = toPascalCase(collectionName); // e.g., Users
const modelName = `${singularizePascal(collectionName)}Data`; // e.g., UserData
const collectionRefName = `${collectionPascalName}CollectionRef`; // e.g., UsersCollectionRef
// TODO: Add QueryBuilderName, UpdateBuilderName later
-%>
using Google.Cloud.Firestore;
using FireSchema.CS.Runtime.Core; // Import runtime core
using System.Threading.Tasks; // For async Task results

namespace <%%= namespace %>
{
    /// <summary>
    /// Typed reference to the '<%%= collectionName %>' collection in Firestore.
    /// Provides methods for common operations like adding, setting, and getting documents.
    /// Generated by FireSchema.
    /// </summary>
    public class <%%= collectionRefName %> : BaseCollectionRef<<%%= modelName %>>
    {
        /// <summary>
        /// The path to this collection in Firestore (e.g., "users").
        /// </summary>
        public const string CollectionPath = "<%%= collectionPath %>"; // Assuming collectionPath is passed

        /// <summary>
        /// Initializes a new instance of the <see cref="<%%= collectionRefName %>"/> class.
        /// </summary>
        /// <param name="firestoreDb">The Firestore database instance.</param>
        public <%%= collectionRefName %>(FirestoreDb firestoreDb)
            : base(firestoreDb, CollectionPath)
        {
        }

        // --- Strongly-typed overrides or new methods can be added here if needed ---

        // Example: Potentially a strongly-typed Add method returning the specific model type with ID
        /// <summary>
        /// Asynchronously adds a new document to this collection with the specified data.
        /// Firestore will generate the document ID, which will be populated in the returned object.
        /// </summary>
        /// <param name="data">The data for the new document.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the newly created document data with its ID.</returns>
        public virtual async Task<<%%= modelName %>> AddAndGetAsync(<%%= modelName %> data)
        {
            var docRef = await base.AddAsync(data);
            data.Id = docRef.Id; // Set the ID on the original object
            return data;
        }


        // --- TODO: Add methods returning specific QueryBuilder/UpdateBuilder types ---
        // public new UsersQueryBuilder Where(...) => new UsersQueryBuilder(FirestoreCollection.Where(...));

<%% if (subcollections && Object.keys(subcollections).length > 0) { -%>
        // --- Subcollection Accessors ---
<%%   Object.entries(subcollections).forEach(([subColId, subColDef]) => {
        const subColPascal = toPascalCase(subColId);
        const subColRefName = `${toPascalCase(collectionName)}${subColPascal}CollectionRef`; // e.g., UsersPostsCollectionRef
        const subColModelName = `${singularizePascal(subColId)}Data`; // e.g., PostData
-%>

        /// <summary>
        /// Gets a typed reference to the '<%%= subColId %>' subcollection for a specific document.
        /// </summary>
        /// <param name="documentId">The ID of the parent document.</param>
        /// <returns>A typed reference to the subcollection.</returns>
        public virtual <%%= subColRefName %> Subcollection_<%%= subColPascal %>(string documentId)
        {
            // Construct the subcollection path relative to the parent document
            var subcollectionPath = $"{CollectionPath}/{documentId}/<%%= subColId %>";
            // Need a way to pass the FirestoreDb instance down or create a new ref
            // For now, assume constructor takes db and path directly
            // This might require changes if BaseCollectionRef constructor changes
            // Or maybe the subcollection ref constructor takes the parent Doc Ref?
            // Let's assume a constructor like: new SubColRef(parentDocRef)
            // return new <%%= subColRefName %>(this.Doc(documentId)); // Requires SubColRef constructor change

            // Alternative: Pass Db and full path
             return new <%%= subColRefName %>(this.FirestoreDb, subcollectionPath); // Assumes SubColRef has (db, path) constructor
        }
<%%   }); -%>
<%% } -%>
    }
}