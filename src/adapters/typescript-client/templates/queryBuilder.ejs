/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
<% /* Import Client SDK types */ -%>
import type { Firestore as ClientFirestore, CollectionReference as ClientCollectionReference, DocumentSnapshot as ClientDocumentSnapshot, Timestamp as ClientTimestamp, DocumentReference as ClientDocumentReference, WhereFilterOp as ClientWhereFilterOp, OrderByDirection as ClientOrderByDirection } from 'firebase/firestore';

// Runtime Imports - Base class and generic types from NEW packages
import { ClientBaseQueryBuilder } from '@shtse8/fireschema-ts-client-runtime'; // Import specific client base class
// Core types like FirestoreLike, DocumentSnapshotLike etc. should be re-exported by the runtime package or imported directly if needed

// Local Imports
import { <%- modelName %>Data } from './<%= collection.collectionId %>.types.js';
<%# Dynamically import other Data types needed for reference fields %>
<% const referencedTypes = new Set(); %>
<% Object.values(collection.fields).forEach(field => { %>
<%   if (field.type === 'reference' && field.referenceTo) { %>
<%     referencedTypes.add(field.referenceTo); %>
<%   } %>
<% }); %>
<% referencedTypes.forEach(refType => { %>
<%   const refModelName = camelToPascalCase(refType); %>
import type { <%- refModelName %>Data } from './<%- refType %>.types.js';
<% }); %>

/**
 * A typed query builder for the '<%- collection.collectionId %>' collection, extending BaseQueryBuilder.
 */
export class <%- modelName %>QueryBuilder extends ClientBaseQueryBuilder<<%- modelName %>Data> { // Extend specific client base class

  // Constructor inherited from BaseQueryBuilder, accepts FirestoreLike and CollectionReferenceLike

  // --- Field-specific Where Methods ---
<% Object.values(collection.fields).forEach(field => { -%>
<%   // Pass sdk context to getQueryInfoForField
   const queryInfos = getQueryInfoForField(field); -%>
<%   if (queryInfos.length > 0) { -%>
  // Overloads for '<%- field.fieldName %>' field type safety based on operator
<%   queryInfos.forEach(info => { -%>
   <%# Use generic WhereFilterOpLike for the op parameter type %>
  where<%- capitalizeFirstLetter(field.fieldName) %>(op: '<%- info.op %>', value: <%- info.valueType %>): this;
<%   }); -%>
  // Implementation signature for '<%- field.fieldName %>'
  where<%- capitalizeFirstLetter(field.fieldName) %>(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('<%- field.fieldName %>', op, value);
  }
<%   } -%>
<% }); -%>
  // --- End Field-specific Where Methods ---

  // Methods like orderBy(), limit(), limitToLast(), startAt(), startAfter(),
  // endBefore(), endAt(), get(), getSnapshot() are inherited from BaseQueryBuilder.

  // --- Custom Query Methods Placeholder ---
}