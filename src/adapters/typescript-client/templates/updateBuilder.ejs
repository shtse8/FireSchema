/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
<% /* Remove direct SDK imports, use generic types from runtime */ -%>
<% /*
import {
  DocumentReference,
  FieldValue,
  Timestamp,
} from 'firebase/firestore';
*/ -%>

// Runtime Imports - Base class and generic types
// Runtime Imports - Base class and generic types from NEW packages
import { ClientBaseUpdateBuilder } from '@shtse8/fireschema-ts-client-runtime'; // Import specific client base class
// Core types like DocumentReferenceLike, FieldValueLike etc. should be re-exported by the runtime package or imported directly if needed

// Local Imports
import { <%- modelName %>Data } from './<%= collection.collectionId %>.types.js';
<%# Dynamically import other Data types needed for reference fields %>
<% const referencedTypes = new Set(); %>
<% Object.values(collection.fields).forEach(field => { %>
<%   if (field.type === 'reference' && field.referenceTo) { %>
<%     referencedTypes.add(field.referenceTo); %>
<%   } %>
<% }); %>
<% referencedTypes.forEach(refType => { %>
<%   const refModelName = camelToPascalCase(refType); %>
import type { <%- refModelName %>Data } from './<%- refType %>.types.js';
<% }); %>

/**
 * A typed builder for creating update operations for '<%- collection.collectionId %>' documents, extending BaseUpdateBuilder.
 */
export class <%- modelName %>UpdateBuilder extends ClientBaseUpdateBuilder<<%- modelName %>Data> { // Extend specific client base class

  // Constructor inherited from BaseUpdateBuilder (accepts DocumentReferenceLike)

  // --- Field Setters ---

<% // --- Loop through all generated update method definitions --- %>
<% updateMethods.forEach(method => { %>
<%   const field = method.originalField; %>
<%   // getTypeScriptType now returns generic type names (e.g., TimestampLike)
   const fieldTypeForAtomic = getTypeScriptType(field); %>

  /** Sets the value for the '<%- method.fieldPath %>' field. */
  <%- method.methodName %>(value: <%- method.fieldType %>): this { // method.fieldType includes FieldValueLike
    return this._set('<%- method.fieldPath %>', value);
  }

<%   // --- Generate Atomic Operations based on original field type --- %>
<%   if (field.type === 'number') { %>
  /** Atomically increments the '<%- method.fieldPath %>' field. */
  increment<%- method.methodName.substring(3) %>(value: number): this {
    return this._increment('<%- method.fieldPath %>', value);
  }
<%   } %>
<%   if (field.type === 'array') { %>
<%     // Use the generic type name returned by getTypeScriptType
     const itemType = field.items ? getTypeScriptType(field.items) : 'any'; %>
  /** Atomically adds elements to the '<%- method.fieldPath %>' array field. */
  arrayUnion<%- method.methodName.substring(3) %>(values: <%- itemType %>[] | <%- itemType %>): this {
    return this._arrayUnion('<%- method.fieldPath %>', Array.isArray(values) ? values : [values]);
  }

  /** Atomically removes elements from the '<%- method.fieldPath %>' array field. */
  arrayRemove<%- method.methodName.substring(3) %>(values: <%- itemType %>[] | <%- itemType %>): this {
    return this._arrayRemove('<%- method.fieldPath %>', Array.isArray(values) ? values : [values]);
  }
<%   } %>
<%   if (field.type === 'timestamp' && field.defaultValue === 'serverTimestamp') { %>
  /** Sets the '<%- method.fieldPath %>' field to the server timestamp. */
  set<%- method.methodName.substring(3) %>ToServerTimestamp(): this {
    return this._serverTimestamp('<%- method.fieldPath %>');
  }
<%   } %>
<%   if (!field.required) { %>
  /** Deletes the '<%- method.fieldPath %>' field. */
  delete<%- method.methodName.substring(3) %>(): this {
    return this._deleteField('<%- method.fieldPath %>');
  }
<%   } %>

<% }); %>
  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
}