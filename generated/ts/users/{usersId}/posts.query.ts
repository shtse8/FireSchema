/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import type { Firestore as ClientFirestore, CollectionReference as ClientCollectionReference, DocumentSnapshot as ClientDocumentSnapshot, Timestamp as ClientTimestamp, DocumentReference as ClientDocumentReference, WhereFilterOp as ClientWhereFilterOp, OrderByDirection as ClientOrderByDirection } from 'firebase/firestore';

// Runtime Imports - Base class and generic types
import { BaseQueryBuilder } from '@shtse8/fireschema-runtime'; // Use correct package name
import type { FirestoreLike, CollectionReferenceLike, DocumentSnapshotLike, TimestampLike, DocumentReferenceLike, WhereFilterOpLike, OrderByDirectionLike } from '@shtse8/fireschema-runtime';

// Local Imports
import { PostsData } from './posts.types.js';











/**
 * A typed query builder for the 'posts' collection, extending BaseQueryBuilder.
 */
export class PostsQueryBuilder extends BaseQueryBuilder<PostsData> {

  // Constructor inherited from BaseQueryBuilder, accepts FirestoreLike and CollectionReferenceLike

  // --- Field-specific Where Methods ---
  // Overloads for 'title' field type safety based on operator
   
  whereTitle(op: '==', value: string): this;
   
  whereTitle(op: '!=', value: string): this;
   
  whereTitle(op: '<', value: string): this;
   
  whereTitle(op: '<=', value: string): this;
   
  whereTitle(op: '>', value: string): this;
   
  whereTitle(op: '>=', value: string): this;
   
  whereTitle(op: 'in', value: string[]): this;
   
  whereTitle(op: 'not-in', value: string[]): this;
  // Implementation signature for 'title'
  whereTitle(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('title', op, value);
  }
  // Overloads for 'content' field type safety based on operator
   
  whereContent(op: '==', value: string): this;
   
  whereContent(op: '!=', value: string): this;
   
  whereContent(op: '<', value: string): this;
   
  whereContent(op: '<=', value: string): this;
   
  whereContent(op: '>', value: string): this;
   
  whereContent(op: '>=', value: string): this;
   
  whereContent(op: 'in', value: string[]): this;
   
  whereContent(op: 'not-in', value: string[]): this;
  // Implementation signature for 'content'
  whereContent(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('content', op, value);
  }
  // Overloads for 'publishedAt' field type safety based on operator
   
  wherePublishedAt(op: '==', value: TimestampLike): this;
   
  wherePublishedAt(op: '!=', value: TimestampLike): this;
   
  wherePublishedAt(op: '<', value: TimestampLike): this;
   
  wherePublishedAt(op: '<=', value: TimestampLike): this;
   
  wherePublishedAt(op: '>', value: TimestampLike): this;
   
  wherePublishedAt(op: '>=', value: TimestampLike): this;
   
  wherePublishedAt(op: 'in', value: TimestampLike[]): this;
   
  wherePublishedAt(op: 'not-in', value: TimestampLike[]): this;
  // Implementation signature for 'publishedAt'
  wherePublishedAt(
    op: WhereFilterOpLike, // Use generic WhereFilterOpLike
    value: any
  ): this {
    // Call the protected _where method from the base class
    return this._where('publishedAt', op, value);
  }
  // --- End Field-specific Where Methods ---

  // Methods like orderBy(), limit(), limitToLast(), startAt(), startAfter(),
  // endBefore(), endAt(), get(), getSnapshot() are inherited from BaseQueryBuilder.

  // --- Custom Query Methods Placeholder ---
}