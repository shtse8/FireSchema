/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  DocumentReference,
  updateDoc,
  FieldValue,
  serverTimestamp,
  increment,
  arrayUnion,
  arrayRemove,
  deleteField,
} from 'firebase/firestore';
import { PostsData } from './posts.types';

// Define the structure for update data, allowing FieldValue types
// This is complex to type perfectly for nested fields, so internal representation is simpler.
// type FieldValueUpdate<T> = {
//   [K in keyof T]?: T[K] | FieldValue;
// };

/**
 * A typed builder for creating update operations for 'posts' documents.
 */
export class PostsUpdateBuilder {
  private _docRef: DocumentReference<PostsData>;
  private _updateData: Record<string, any> = {}; // Use Record<string, any> internally

  constructor(docRef: DocumentReference<PostsData>) {
    this._docRef = docRef;
  }

  // --- Field Setters ---
  /** Sets the value for the 'title' field. */
  setTitle(value: string): this {
    this._updateData['title'] = value;
    return this;
  }


  /** Sets the value for the 'content' field. */
  setContent(value: string): this {
    this._updateData['content'] = value;
    return this;
  }

  /** Deletes the 'content' field. */
  deleteContent(): this {
    this._updateData['content'] = deleteField();
    return this;
  }

  /** Sets the value for the 'publishedAt' field. */
  setPublishedAt(value: Timestamp): this {
    this._updateData['publishedAt'] = value;
    return this;
  }

  /** Deletes the 'publishedAt' field. */
  deletePublishedAt(): this {
    this._updateData['publishedAt'] = deleteField();
    return this;
  }

  // --- End Field Setters ---

  /**
   * Commits the update operations to Firestore.
   * @returns A promise that resolves when the update is complete.
   */
  async commit(): Promise<void> {
    if (Object.keys(this._updateData).length === 0) {
      // No updates specified, maybe warn or just do nothing?
      console.warn('Update commit called with no changes specified.');
      return;
    }
    await updateDoc(this._docRef, this._updateData);
  }
}