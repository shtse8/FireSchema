/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  DocumentReference,
  updateDoc,
  FieldValue,
  serverTimestamp,
  increment,
  arrayUnion,
  arrayRemove,
  deleteField,
} from 'firebase/firestore';
import { AddressesData } from './addresses.types';

// Define the structure for update data, allowing FieldValue types
// This is complex to type perfectly for nested fields, so internal representation is simpler.
// type FieldValueUpdate<T> = {
//   [K in keyof T]?: T[K] | FieldValue;
// };

/**
 * A typed builder for creating update operations for 'addresses' documents.
 */
export class AddressesUpdateBuilder {
  private _docRef: DocumentReference<AddressesData>;
  private _updateData: Record<string, any> = {}; // Use Record<string, any> internally

  constructor(docRef: DocumentReference<AddressesData>) {
    this._docRef = docRef;
  }

  // --- Field Setters ---
  /** Sets the value for the 'street' field. */
  setStreet(value: string): this {
    this._updateData['street'] = value;
    return this;
  }


  /** Sets the value for the 'city' field. */
  setCity(value: string): this {
    this._updateData['city'] = value;
    return this;
  }


  /** Sets the value for the 'zip' field. */
  setZip(value: string): this {
    this._updateData['zip'] = value;
    return this;
  }

  /** Deletes the 'zip' field. */
  deleteZip(): this {
    this._updateData['zip'] = deleteField();
    return this;
  }

  // --- End Field Setters ---

  /**
   * Commits the update operations to Firestore.
   * @returns A promise that resolves when the update is complete.
   */
  async commit(): Promise<void> {
    if (Object.keys(this._updateData).length === 0) {
      // No updates specified, maybe warn or just do nothing?
      console.warn('Update commit called with no changes specified.');
      return;
    }
    await updateDoc(this._docRef, this._updateData);
  }
}