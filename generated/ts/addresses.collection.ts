/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  Firestore,
  CollectionReference, // Keep for type annotation if needed, but base handles creation
  DocumentReference,
  DocumentData, // Needed for parentRef typing and subCollection helper
  // serverTimestamp, // Handled by base class applyDefaults
  // increment, // Not used directly here
  // arrayUnion, // Not used directly here
  // arrayRemove, // Not used directly here
  // deleteField, // Not used directly here
  // Basic CRUD functions (collection, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc) are handled by base
} from 'firebase/firestore';
// Runtime Imports
import { BaseCollectionRef, CollectionSchema } from '@fireschema/ts-runtime'; // Adjust path/package name as needed

// Local Imports
import { AddressesData } from './addresses.types';
import { AddressesQueryBuilder } from './addresses.query';
import { AddressesUpdateBuilder } from './addresses.update';



// Define types for data manipulation.
// AddData: Makes fields optional if they have a default value or are not required.
// NOTE: This might need refinement if base class handles defaults differently.
type AddressesAddData = {
  street: AddressesData['street'];
  city: AddressesData['city'];
  zip?: AddressesData['zip'];
};
// UpdateData: Type used by UpdateBuilder, defined there or implicitly via Firestore types.

/**
 * Typed reference to the 'addresses' collection, extending BaseCollectionRef.
 */
export class AddressesCollection extends BaseCollectionRef<AddressesData, AddressesAddData> {

  /**
   * @param firestore The Firestore instance.
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  constructor(firestore: Firestore, parentRef?: DocumentReference<DocumentData>) {
    // Pass schema details (collection object) to the base class for features like default handling
    const schema: CollectionSchema = {
        fields: {
  "street": {
    "fieldName": "street",
    "type": "string",
    "required": true
  },
  "city": {
    "fieldName": "city",
    "type": "string",
    "required": true
  },
  "zip": {
    "fieldName": "zip",
    "type": "string",
    "required": false
  }
} // Pass field definitions
        // Add subcollection info if BaseCollectionRef needs it
    };
    super(firestore, 'addresses', schema, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   * @param id The ID of the document to update.
   * @returns A new AddressesUpdateBuilder instance.
   */
  update(id: string): AddressesUpdateBuilder {
    // Returns the specific generated UpdateBuilder
    return new AddressesUpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   * @returns A new AddressesQueryBuilder instance.
   */
  query(): AddressesQueryBuilder {
    // Returns the specific generated QueryBuilder
    return new AddressesQueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---


  // --- Custom Methods Placeholder ---
  // Example: findByEmail(email: string) { ... } - Add custom query methods here if needed
}