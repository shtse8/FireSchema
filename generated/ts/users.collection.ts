/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  Firestore,
  CollectionReference, // Keep for type annotation if needed, but base handles creation
  DocumentReference,
  DocumentData, // Needed for parentRef typing and subCollection helper
  // serverTimestamp, // Handled by base class applyDefaults
  // increment, // Not used directly here
  // arrayUnion, // Not used directly here
  // arrayRemove, // Not used directly here
  // deleteField, // Not used directly here
  // Basic CRUD functions (collection, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc) are handled by base
} from 'firebase/firestore';
// Runtime Imports
import { BaseCollectionRef, CollectionSchema, FieldSchema } from '@fireschema/ts-runtime'; // Removed FirestoreFunctions import

// Local Imports
import { UsersData } from './users.types.js';
import { UsersQueryBuilder } from './users.query.js';
import { UsersUpdateBuilder } from './users.update.js';




import { PostsCollection } from './users/{usersId}/posts.collection.js';



// Define types for data manipulation.
// AddData: Makes fields optional if they have a default value or are not required.
// NOTE: This might need refinement if base class handles defaults differently.
type UsersAddData = {
  displayName: UsersData['displayName'];
  email: UsersData['email'];
  createdAt?: UsersData['createdAt'];
  lastLogin?: UsersData['lastLogin'];
  age?: UsersData['age'];
  isActive?: UsersData['isActive'];
  settings?: UsersData['settings'];
  tags?: UsersData['tags'];
  primaryAddressRef?: UsersData['primaryAddressRef'];
};
// UpdateData: Type used by UpdateBuilder, defined there or implicitly via Firestore types.

/**
 * Typed reference to the 'users' collection, extending BaseCollectionRef.
 */
export class UsersCollection extends BaseCollectionRef<UsersData, UsersAddData> {

  /**
   * @param firestore The Firestore instance.
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  // Constructor needs to accept all potential args for both root and subcollection instantiation
  constructor(
    firestore: Firestore,
    collectionId: string,
    // firestoreFunctions removed
    schema?: CollectionSchema,
    parentRef?: DocumentReference<DocumentData>
  ) {
    // Process fields from the input schema to create a valid CollectionSchema for the runtime
    const processedFields: Record<string, FieldSchema> = {};
    
      processedFields['displayName'] = {
        
        // Add other allowed FieldSchema properties here if needed
      };
    
      processedFields['email'] = {
        
        // Add other allowed FieldSchema properties here if needed
      };
    
      processedFields['createdAt'] = {
        
        defaultValue: "serverTimestamp",
        
        // Add other allowed FieldSchema properties here if needed
      };
    
      processedFields['lastLogin'] = {
        
        // Add other allowed FieldSchema properties here if needed
      };
    
      processedFields['age'] = {
        
        // Add other allowed FieldSchema properties here if needed
      };
    
      processedFields['isActive'] = {
        
        defaultValue: true,
        
        // Add other allowed FieldSchema properties here if needed
      };
    
      processedFields['settings'] = {
        
        // Add other allowed FieldSchema properties here if needed
      };
    
      processedFields['tags'] = {
        
        // Add other allowed FieldSchema properties here if needed
      };
    
      processedFields['primaryAddressRef'] = {
        
        // Add other allowed FieldSchema properties here if needed
      };
    
    const schemaForRuntime: CollectionSchema = { fields: processedFields };

    // Call the base class constructor, passing the resolved collectionId and schema
    // Pass firestoreFunctions to the base class constructor
    // Removed firestoreFunctions from super() call
    super(firestore, collectionId, schema ?? schemaForRuntime, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   * @param id The ID of the document to update.
   * @returns A new UsersUpdateBuilder instance.
   */
  update(id: string): UsersUpdateBuilder {
    // Returns the specific generated UpdateBuilder
    return new UsersUpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   * @returns A new UsersQueryBuilder instance.
   */
  query(): UsersQueryBuilder {
    // Returns the specific generated QueryBuilder
    return new UsersQueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---




  /**
   * Access the 'posts' subcollection for a specific document.
   * @param documentId The ID of the parent 'users' document.
   * @returns A typed reference to the 'posts' subcollection.
   */
  posts(documentId: string): PostsCollection {
    // Use the helper method from BaseCollectionRef
    // Process subcollection fields similarly to the main constructor
    const processedSubFields: Record<string, FieldSchema> = {};
    
      processedSubFields['title'] = {
        
      };
    
      processedSubFields['content'] = {
        
      };
    
      processedSubFields['publishedAt'] = {
        
      };
    
    const subSchema: CollectionSchema = { fields: processedSubFields };
    // Pass the instance's firestoreFunctions down to the subcollection helper
    // Pass only the required arguments to the subCollection helper
    // Removed firestoreFunctions from subCollection call
    return this.subCollection(documentId, 'posts', PostsCollection, subSchema);
  }



  // --- Custom Methods Placeholder ---
  // Example: findByEmail(email: string) { ... } - Add custom query methods here if needed
}