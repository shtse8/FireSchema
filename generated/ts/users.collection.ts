/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  Firestore,
  CollectionReference, // Keep for type annotation if needed, but base handles creation
  DocumentReference,
  DocumentData, // Needed for parentRef typing and subCollection helper
  // serverTimestamp, // Handled by base class applyDefaults
  // increment, // Not used directly here
  // arrayUnion, // Not used directly here
  // arrayRemove, // Not used directly here
  // deleteField, // Not used directly here
  // Basic CRUD functions (collection, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc) are handled by base
} from 'firebase/firestore';
// Runtime Imports
import { BaseCollectionRef, CollectionSchema } from '@fireschema/ts-runtime'; // Adjust path/package name as needed

// Local Imports
import { UsersData } from './users.types';
import { UsersQueryBuilder } from './users.query';
import { UsersUpdateBuilder } from './users.update';




import { PostsCollection } from './users/{usersId}/posts.collection';



// Define types for data manipulation.
// AddData: Makes fields optional if they have a default value or are not required.
// NOTE: This might need refinement if base class handles defaults differently.
type UsersAddData = {
  displayName: UsersData['displayName'];
  email: UsersData['email'];
  createdAt?: UsersData['createdAt'];
  lastLogin?: UsersData['lastLogin'];
  age?: UsersData['age'];
  isActive?: UsersData['isActive'];
  settings?: UsersData['settings'];
  tags?: UsersData['tags'];
  primaryAddressRef?: UsersData['primaryAddressRef'];
};
// UpdateData: Type used by UpdateBuilder, defined there or implicitly via Firestore types.

/**
 * Typed reference to the 'users' collection, extending BaseCollectionRef.
 */
export class UsersCollection extends BaseCollectionRef<UsersData, UsersAddData> {

  /**
   * @param firestore The Firestore instance.
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  constructor(firestore: Firestore, parentRef?: DocumentReference<DocumentData>) {
    // Pass schema details (collection object) to the base class for features like default handling
    const schema: CollectionSchema = {
        fields: {
  "displayName": {
    "fieldName": "displayName",
    "description": "User's public display name",
    "type": "string",
    "required": true
  },
  "email": {
    "fieldName": "email",
    "type": "string",
    "required": true
  },
  "createdAt": {
    "fieldName": "createdAt",
    "description": "Timestamp when the user was created",
    "type": "timestamp",
    "required": false,
    "defaultValue": "serverTimestamp"
  },
  "lastLogin": {
    "fieldName": "lastLogin",
    "type": "timestamp",
    "required": false
  },
  "age": {
    "fieldName": "age",
    "type": "number",
    "required": false
  },
  "isActive": {
    "fieldName": "isActive",
    "type": "boolean",
    "required": false,
    "defaultValue": true
  },
  "settings": {
    "fieldName": "settings",
    "type": "map",
    "required": false,
    "properties": {
      "theme": {
        "fieldName": "theme",
        "type": "string",
        "required": false,
        "defaultValue": "light"
      },
      "notificationsEnabled": {
        "fieldName": "notificationsEnabled",
        "type": "boolean",
        "required": false,
        "defaultValue": true
      }
    }
  },
  "tags": {
    "fieldName": "tags",
    "type": "array",
    "required": false,
    "items": {
      "fieldName": "item",
      "type": "string",
      "required": false
    }
  },
  "primaryAddressRef": {
    "fieldName": "primaryAddressRef",
    "type": "reference",
    "required": false,
    "referenceTo": "addresses"
  }
} // Pass field definitions
        // Add subcollection info if BaseCollectionRef needs it
    };
    super(firestore, 'users', schema, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   * @param id The ID of the document to update.
   * @returns A new UsersUpdateBuilder instance.
   */
  update(id: string): UsersUpdateBuilder {
    // Returns the specific generated UpdateBuilder
    return new UsersUpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   * @returns A new UsersQueryBuilder instance.
   */
  query(): UsersQueryBuilder {
    // Returns the specific generated QueryBuilder
    return new UsersQueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---




  /**
   * Access the 'posts' subcollection for a specific document.
   * @param documentId The ID of the parent 'users' document.
   * @returns A typed reference to the 'posts' subcollection.
   */
  posts(documentId: string): PostsCollection {
    // Use the helper method from BaseCollectionRef
    const subSchema: CollectionSchema = { fields: {
  "title": {
    "fieldName": "title",
    "type": "string",
    "required": true
  },
  "content": {
    "fieldName": "content",
    "type": "string",
    "required": false
  },
  "publishedAt": {
    "fieldName": "publishedAt",
    "type": "timestamp",
    "required": false
  }
} };
    return this.subCollection(documentId, 'posts', PostsCollection, subSchema);
  }



  // --- Custom Methods Placeholder ---
  // Example: findByEmail(email: string) { ... } - Add custom query methods here if needed
}