/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  DocumentReference,
  updateDoc,
  FieldValue,
  serverTimestamp,
  increment,
  arrayUnion,
  arrayRemove,
  deleteField,
} from 'firebase/firestore';
import { UsersData } from './users.types';

// Define the structure for update data, allowing FieldValue types
// This is complex to type perfectly for nested fields, so internal representation is simpler.
// type FieldValueUpdate<T> = {
//   [K in keyof T]?: T[K] | FieldValue;
// };

/**
 * A typed builder for creating update operations for 'users' documents.
 */
export class UsersUpdateBuilder {
  private _docRef: DocumentReference<UsersData>;
  private _updateData: Record<string, any> = {}; // Use Record<string, any> internally

  constructor(docRef: DocumentReference<UsersData>) {
    this._docRef = docRef;
  }

  // --- Field Setters ---
  /** Sets the value for the 'displayName' field. */
  setDisplayName(value: string): this {
    this._updateData['displayName'] = value;
    return this;
  }


  /** Sets the value for the 'email' field. */
  setEmail(value: string): this {
    this._updateData['email'] = value;
    return this;
  }


  /** Sets the value for the 'createdAt' field. */
  setCreatedAt(value: Timestamp): this {
    this._updateData['createdAt'] = value;
    return this;
  }

  /** Sets the 'createdAt' field to the server timestamp. */
  setCreatedAtToServerTimestamp(): this {
    this._updateData['createdAt'] = serverTimestamp();
    return this;
  }
  /** Deletes the 'createdAt' field. */
  deleteCreatedAt(): this {
    this._updateData['createdAt'] = deleteField();
    return this;
  }

  /** Sets the value for the 'lastLogin' field. */
  setLastLogin(value: Timestamp): this {
    this._updateData['lastLogin'] = value;
    return this;
  }

  /** Deletes the 'lastLogin' field. */
  deleteLastLogin(): this {
    this._updateData['lastLogin'] = deleteField();
    return this;
  }

  /** Sets the value for the 'age' field. */
  setAge(value: number): this {
    this._updateData['age'] = value;
    return this;
  }

  /** Atomically increments the 'age' field. */
  incrementAge(value: number): this {
    this._updateData['age'] = increment(value);
    return this;
  }
  /** Deletes the 'age' field. */
  deleteAge(): this {
    this._updateData['age'] = deleteField();
    return this;
  }

  /** Sets the value for the 'isActive' field. */
  setIsActive(value: boolean): this {
    this._updateData['isActive'] = value;
    return this;
  }

  /** Deletes the 'isActive' field. */
  deleteIsActive(): this {
    this._updateData['isActive'] = deleteField();
    return this;
  }

  /** Sets the value for the 'settings' field. */
  setSettings(value: { theme?: string; notificationsEnabled?: boolean }): this {
    this._updateData['settings'] = value;
    return this;
  }

  /** Deletes the 'settings' field. */
  deleteSettings(): this {
    this._updateData['settings'] = deleteField();
    return this;
  }

  /** Sets the value for the 'tags' field. */
  setTags(value: string[]): this {
    this._updateData['tags'] = value;
    return this;
  }

  /** Atomically adds elements to the 'tags' array field. */
  arrayUnionTags(values: string[] | string): this {
    this._updateData['tags'] = arrayUnion(...(Array.isArray(values) ? values : [values]));
    return this;
  }

  /** Atomically removes elements from the 'tags' array field. */
  arrayRemoveTags(values: string[] | string): this {
    this._updateData['tags'] = arrayRemove(...(Array.isArray(values) ? values : [values]));
    return this;
  }
  /** Deletes the 'tags' field. */
  deleteTags(): this {
    this._updateData['tags'] = deleteField();
    return this;
  }

  /** Sets the value for the 'primaryAddressRef' field. */
  setPrimaryAddressRef(value: DocumentReference<AddressesData>): this {
    this._updateData['primaryAddressRef'] = value;
    return this;
  }

  /** Deletes the 'primaryAddressRef' field. */
  deletePrimaryAddressRef(): this {
    this._updateData['primaryAddressRef'] = deleteField();
    return this;
  }

  // --- End Field Setters ---

  /**
   * Commits the update operations to Firestore.
   * @returns A promise that resolves when the update is complete.
   */
  async commit(): Promise<void> {
    if (Object.keys(this._updateData).length === 0) {
      // No updates specified, maybe warn or just do nothing?
      console.warn('Update commit called with no changes specified.');
      return;
    }
    await updateDoc(this._docRef, this._updateData);
  }
}