/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import './posts_data.dart'; // Import the generated model type

/// Typed query builder for the 'posts' collection.
class PostsQueryBuilder {
  final FirebaseFirestore firestore;
  final CollectionReference<PostsData> collectionRef;
  Query<PostsData> _query; // Internal query state

  PostsQueryBuilder(this.firestore, this.collectionRef) : _query = collectionRef;

  /// Creates a new query builder instance with the applied query constraints.
  PostsQueryBuilder._(this.firestore, this.collectionRef, this._query);

// --- Field-specific Where Methods ---
  /// Adds a query filter for the 'title' field.
  ///
  /// Available filter parameters: isEqualTo, isNotEqualTo, isLessThan, isLessThanOrEqualTo, isGreaterThan, isGreaterThanOrEqualTo, whereIn, whereNotIn
  PostsQueryBuilder whereTitle({
    String isEqualTo,
    String isNotEqualTo,
    String isLessThan,
    String isLessThanOrEqualTo,
    String isGreaterThan,
    String isGreaterThanOrEqualTo,
    List<dynamic> whereIn,
    List<dynamic> whereNotIn
  }) {
    Query<PostsData> newQuery = _query;
    if (isEqualTo != null) newQuery = newQuery.where('title', isEqualTo: isEqualTo);
    if (isNotEqualTo != null) newQuery = newQuery.where('title', isNotEqualTo: isNotEqualTo);
    if (isLessThan != null) newQuery = newQuery.where('title', isLessThan: isLessThan);
    if (isLessThanOrEqualTo != null) newQuery = newQuery.where('title', isLessThanOrEqualTo: isLessThanOrEqualTo);
    if (isGreaterThan != null) newQuery = newQuery.where('title', isGreaterThan: isGreaterThan);
    if (isGreaterThanOrEqualTo != null) newQuery = newQuery.where('title', isGreaterThanOrEqualTo: isGreaterThanOrEqualTo);
    if (whereIn != null) newQuery = newQuery.where('title', whereIn: whereIn);
    if (whereNotIn != null) newQuery = newQuery.where('title', whereNotIn: whereNotIn);
    // It's recommended to only pass one operator per where<FieldName> call.
    // If multiple are passed, Firestore behavior might be unexpected or unsupported.
    return PostsQueryBuilder._(firestore, collectionRef, newQuery);
  }
  /// Adds a query filter for the 'content' field.
  ///
  /// Available filter parameters: isEqualTo, isNotEqualTo, isLessThan, isLessThanOrEqualTo, isGreaterThan, isGreaterThanOrEqualTo, whereIn, whereNotIn
  PostsQueryBuilder whereContent({
    String? isEqualTo,
    String? isNotEqualTo,
    String? isLessThan,
    String? isLessThanOrEqualTo,
    String? isGreaterThan,
    String? isGreaterThanOrEqualTo,
    List<dynamic> whereIn,
    List<dynamic> whereNotIn
  }) {
    Query<PostsData> newQuery = _query;
    if (isEqualTo != null) newQuery = newQuery.where('content', isEqualTo: isEqualTo);
    if (isNotEqualTo != null) newQuery = newQuery.where('content', isNotEqualTo: isNotEqualTo);
    if (isLessThan != null) newQuery = newQuery.where('content', isLessThan: isLessThan);
    if (isLessThanOrEqualTo != null) newQuery = newQuery.where('content', isLessThanOrEqualTo: isLessThanOrEqualTo);
    if (isGreaterThan != null) newQuery = newQuery.where('content', isGreaterThan: isGreaterThan);
    if (isGreaterThanOrEqualTo != null) newQuery = newQuery.where('content', isGreaterThanOrEqualTo: isGreaterThanOrEqualTo);
    if (whereIn != null) newQuery = newQuery.where('content', whereIn: whereIn);
    if (whereNotIn != null) newQuery = newQuery.where('content', whereNotIn: whereNotIn);
    // It's recommended to only pass one operator per where<FieldName> call.
    // If multiple are passed, Firestore behavior might be unexpected or unsupported.
    return PostsQueryBuilder._(firestore, collectionRef, newQuery);
  }
  /// Adds a query filter for the 'publishedAt' field.
  ///
  /// Available filter parameters: isEqualTo, isNotEqualTo, isLessThan, isLessThanOrEqualTo, isGreaterThan, isGreaterThanOrEqualTo, whereIn, whereNotIn
  PostsQueryBuilder wherePublishedAt({
    Timestamp? isEqualTo,
    Timestamp? isNotEqualTo,
    Timestamp? isLessThan,
    Timestamp? isLessThanOrEqualTo,
    Timestamp? isGreaterThan,
    Timestamp? isGreaterThanOrEqualTo,
    List<dynamic> whereIn,
    List<dynamic> whereNotIn
  }) {
    Query<PostsData> newQuery = _query;
    if (isEqualTo != null) newQuery = newQuery.where('publishedAt', isEqualTo: isEqualTo);
    if (isNotEqualTo != null) newQuery = newQuery.where('publishedAt', isNotEqualTo: isNotEqualTo);
    if (isLessThan != null) newQuery = newQuery.where('publishedAt', isLessThan: isLessThan);
    if (isLessThanOrEqualTo != null) newQuery = newQuery.where('publishedAt', isLessThanOrEqualTo: isLessThanOrEqualTo);
    if (isGreaterThan != null) newQuery = newQuery.where('publishedAt', isGreaterThan: isGreaterThan);
    if (isGreaterThanOrEqualTo != null) newQuery = newQuery.where('publishedAt', isGreaterThanOrEqualTo: isGreaterThanOrEqualTo);
    if (whereIn != null) newQuery = newQuery.where('publishedAt', whereIn: whereIn);
    if (whereNotIn != null) newQuery = newQuery.where('publishedAt', whereNotIn: whereNotIn);
    // It's recommended to only pass one operator per where<FieldName> call.
    // If multiple are passed, Firestore behavior might be unexpected or unsupported.
    return PostsQueryBuilder._(firestore, collectionRef, newQuery);
  }
  // --- End Field-specific Where Methods ---

   /// Adds an orderBy clause to the query.
  PostsQueryBuilder orderBy(String fieldPath, {bool descending = false}) {
     final newQuery = _query.orderBy(fieldPath, descending: descending);
     return PostsQueryBuilder._(firestore, collectionRef, newQuery);
  }

  /// Adds a limit clause to the query.
  PostsQueryBuilder limit(int limit) {
     final newQuery = _query.limit(limit);
     return PostsQueryBuilder._(firestore, collectionRef, newQuery);
  }

  // TODO: Add limitToLast, startAt, startAfter, endAt, endBefore methods

  /// Executes the query and returns the matching documents.
  Future<List<PostsData>> get() async {
    final snapshot = await _query.get();
    return snapshot.docs.map((doc) => doc.data()).toList();
     // TODO: Consider returning document IDs as well
  }

   /// Executes the query and returns a stream of matching documents.
  Stream<List<PostsData>> snapshots() {
    return _query.snapshots().map((snapshot) =>
        snapshot.docs.map((doc) => doc.data()).toList());
  }
}