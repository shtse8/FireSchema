/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import 'package:cloud_firestore/cloud_firestore.dart';
// Runtime Imports
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import the runtime package

// Local Imports
import 'posts_data.dart';

/// A typed query builder for the 'posts' collection, extending BaseQueryBuilder.
class PostsQueryBuilder extends BaseQueryBuilder<PostsData> {

  /// Creates a PostsQueryBuilder instance.
  PostsQueryBuilder({
    required FirebaseFirestore firestore,
    required CollectionReference<PostsData> collectionRef,
  }) : super(firestore: firestore, collectionRef: collectionRef);

  // Constructor and internal query state are inherited from BaseQueryBuilder

  // --- Field-specific Where Methods ---
  /// Adds a query filter for the 'title' field.
  /// Provide one of the named parameters to specify the query condition.
  PostsQueryBuilder whereTitle({
    String isEqualTo,
    String isNotEqualTo,
    String isLessThan,
    String isLessThanOrEqualTo,
    String isGreaterThan,
    String isGreaterThanOrEqualTo,
    List<dynamic> whereIn,
    List<dynamic> whereNotIn,
  }) {
    // Call the protected where method from the base class
    return where(
      'title', // Pass the field path string
      isEqualTo: isEqualTo,
      isNotEqualTo: isNotEqualTo,
      isLessThan: isLessThan,
      isLessThanOrEqualTo: isLessThanOrEqualTo,
      isGreaterThan: isGreaterThan,
      isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
      whereIn: whereIn,
      whereNotIn: whereNotIn,
    ) as PostsQueryBuilder; // Cast back to specific type
  }
  /// Adds a query filter for the 'content' field.
  /// Provide one of the named parameters to specify the query condition.
  PostsQueryBuilder whereContent({
    String? isEqualTo,
    String? isNotEqualTo,
    String? isLessThan,
    String? isLessThanOrEqualTo,
    String? isGreaterThan,
    String? isGreaterThanOrEqualTo,
    List<dynamic> whereIn,
    List<dynamic> whereNotIn,
  }) {
    // Call the protected where method from the base class
    return where(
      'content', // Pass the field path string
      isEqualTo: isEqualTo,
      isNotEqualTo: isNotEqualTo,
      isLessThan: isLessThan,
      isLessThanOrEqualTo: isLessThanOrEqualTo,
      isGreaterThan: isGreaterThan,
      isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
      whereIn: whereIn,
      whereNotIn: whereNotIn,
    ) as PostsQueryBuilder; // Cast back to specific type
  }
  /// Adds a query filter for the 'publishedAt' field.
  /// Provide one of the named parameters to specify the query condition.
  PostsQueryBuilder wherePublishedAt({
    Timestamp? isEqualTo,
    Timestamp? isNotEqualTo,
    Timestamp? isLessThan,
    Timestamp? isLessThanOrEqualTo,
    Timestamp? isGreaterThan,
    Timestamp? isGreaterThanOrEqualTo,
    List<dynamic> whereIn,
    List<dynamic> whereNotIn,
  }) {
    // Call the protected where method from the base class
    return where(
      'publishedAt', // Pass the field path string
      isEqualTo: isEqualTo,
      isNotEqualTo: isNotEqualTo,
      isLessThan: isLessThan,
      isLessThanOrEqualTo: isLessThanOrEqualTo,
      isGreaterThan: isGreaterThan,
      isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
      whereIn: whereIn,
      whereNotIn: whereNotIn,
    ) as PostsQueryBuilder; // Cast back to specific type
  }
  // --- End Field-specific Where Methods ---

  // Methods like orderBy(), limit(), limitToLast(), startAt(), startAfter(),
  // endBefore(), endAt(), get(), getData() are inherited from BaseQueryBuilder.

  // --- Custom Query Methods Placeholder ---
}