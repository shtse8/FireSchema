/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
// Import other necessary packages if needed



/// Represents the data structure for a 'Addresses' document.
/// Description: Stores user addresses
class AddressesData {
  /// street (string, required)
  final String street;
  /// city (string, required)
  final String city;
  /// zip (string)
  final String? zip;

  const AddressesData({
    required this.street,
    required this.city,
    this.zip,
  });

  /// Creates a AddressesData instance from a Firestore DocumentSnapshot.
  factory AddressesData.fromSnapshot(DocumentSnapshot snapshot) {
    final data = snapshot.data() as Map<String, dynamic>?;
    if (data == null) {
        throw Exception("Document data was null!"); // Or handle differently
    }
    return AddressesData(
      street: data['street'] as String, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      city: data['city'] as String, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      zip: data['zip'] as String?, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
    );
  }

   /// Creates a AddressesData instance from a Map.
  factory AddressesData.fromJson(Map<String, dynamic> data) {
     return AddressesData(
      street: data['street'] as String, // TODO: Add type casting/parsing
      city: data['city'] as String, // TODO: Add type casting/parsing
      zip: data['zip'] as String?, // TODO: Add type casting/parsing
    );
  }

  /// Converts this AddressesData instance to a Map suitable for Firestore.
  Map<String, dynamic> toJson() {
    return {
      'street': street, // TODO: Handle nested toJson for maps/lists/refs?
      'city': city, // TODO: Handle nested toJson for maps/lists/refs?
      'zip': zip, // TODO: Handle nested toJson for maps/lists/refs?
    };
  }

  /// Creates a copy of this instance with potentially modified fields.
  AddressesData copyWith({
    String? street,
    String? city,
    String? zip,
  }) {
    return AddressesData(
      street: street ?? this.street,
      city: city ?? this.city,
      zip: zip ?? this.zip,
    );
  }

  // TODO: Add toString, equals, hashCode implementations?
}