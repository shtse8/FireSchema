/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import runtime types
// Import other necessary packages if needed



/// Represents the data structure for a 'Addresses' document.
/// Description: Stores user addresses
class AddressesData {
  /// street (string, required)
  final String street;
  /// city (string, required)
  final String city;
  /// zip (string)
  final String? zip;

  const AddressesData({
    required this.street,
    required this.city,
    this.zip,
  });

  /// Creates a AddressesData instance from a Firestore DocumentSnapshot.
  factory AddressesData.fromSnapshot(DocumentSnapshot snapshot) {
    final data = snapshot.data() as Map<String, dynamic>?;
    if (data == null) {
        throw Exception("Document data was null on snapshot ${snapshot.id}!");
    }
    return AddressesData.fromJson(data); // Reuse fromJson logic
  }

   /// Creates a AddressesData instance from a Map.
  factory AddressesData.fromJson(Map<String, dynamic> data) {
     return AddressesData(








      street: data['street'] as String? ?? (throw Exception("Missing required field: street in $data")),








      city: data['city'] as String? ?? (throw Exception("Missing required field: city in $data")),








      zip: data['zip'] as String?,
    );
  }

  /// Creates a AddressesData instance from a Firestore DocumentSnapshot.
  /// Required for Firestore `withConverter`.
  factory AddressesData.fromFirestore(
    DocumentSnapshot<Map<String, dynamic>> snapshot,
    SnapshotOptions? options,
  ) {
    final data = snapshot.data();
    if (data == null) {
      throw Exception('Snapshot data was null!');
    }
    // We can reuse the existing fromJson logic.
    // Add the document ID to the data map if you want it in the model.
    // data['id'] = snapshot.id; // Optional: include document ID
    return AddressesData.fromJson(data);
  }

  /// Converts this AddressesData instance to a Map suitable for Firestore.
  Map<String, dynamic> toJson() {
    return {








      'street': street,








      'city': city,








      'zip': zip,
    };
  }

  /// Converts this AddressesData instance to a Map suitable for Firestore.
  /// Required for Firestore `withConverter`.
  Map<String, Object?> toFirestore(SetOptions? options) {
    // We can reuse the existing toJson logic.
    // Firestore expects Map<String, Object?>
    return toJson();
  }

  /// Creates a copy of this instance with potentially modified fields.
  AddressesData copyWith({
    String? street,
    String? city,
    String? zip,
  }) {
    return AddressesData(
      street: street ?? this.street,
      city: city ?? this.city,
      zip: zip ?? this.zip,
    );
  }
} // End of AddressesData class

  // TODO: Add toString, equals, hashCode implementations?


/// Represents the data structure for adding a new 'Addresses' document.
/// Fields with default values (like server timestamps) or optional fields are nullable.
class AddressesAddData implements ToJsonSerializable {


  final String street;


  final String city;


  final String? zip;

  const AddressesAddData({

    required this.street,

    required this.city,

    this.zip,
  });

  /// Converts this instance to a Map suitable for Firestore add operation.
  /// Excludes fields that are null to avoid overwriting server-generated values.
  Map<String, Object?> toJson() {
    final map = <String, Object?>{};

    // Required fields are always included
    // TODO: Handle nested toJson if needed for complex types
    map['street'] = street;

    // Required fields are always included
    // TODO: Handle nested toJson if needed for complex types
    map['city'] = city;

    // Only include non-null values in the map for optional fields
    if (zip != null) {
      // TODO: Handle nested toJson if needed for complex types
      map['zip'] = zip;
    }
    return map;
  }
}