/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import runtime types
// Import other necessary packages if needed



/// Represents the data structure for a 'Users' document.
/// Description: Stores user profile information.
class UsersData {
  /// User's public display name (string, required)
  final String displayName;
  /// email (string, required)
  final String email;
  /// Timestamp when the user was created (timestamp)
  final Timestamp? createdAt;
  /// lastLogin (timestamp)
  final Timestamp? lastLogin;
  /// age (number)
  final num? age;
  /// isActive (boolean)
  final bool? isActive;
  /// settings (map)
  final Map<String, dynamic>? settings;
  /// tags (array)
  final List<String>? tags;
  /// primaryAddressRef (reference)
  final DocumentReference<Map<String, dynamic>>? primaryAddressRef;

  const UsersData({
    required this.displayName,
    required this.email,
    this.createdAt,
    this.lastLogin,
    this.age,
    this.isActive,
    this.settings,
    this.tags,
    this.primaryAddressRef,
  });

  /// Creates a UsersData instance from a Firestore DocumentSnapshot.
  factory UsersData.fromSnapshot(DocumentSnapshot snapshot) {
    final data = snapshot.data() as Map<String, dynamic>?;
    if (data == null) {
        throw Exception("Document data was null on snapshot ${snapshot.id}!");
    }
    return UsersData.fromJson(data); // Reuse fromJson logic
  }

   /// Creates a UsersData instance from a Map.
  factory UsersData.fromJson(Map<String, dynamic> data) {
     return UsersData(








      displayName: data['displayName'] as String? ?? (throw Exception("Missing required field: displayName in $data")),








      email: data['email'] as String? ?? (throw Exception("Missing required field: email in $data")),









      createdAt: data['createdAt'] as Timestamp?,









      lastLogin: data['lastLogin'] as Timestamp?,








      age: data['age'] as num?,








      isActive: data['isActive'] as bool?,








      settings: data['settings'] as Map<String, dynamic>?,









      tags: (data['tags'] as List<dynamic>?)?.map((e) => e as String).toList(),







      primaryAddressRef: data['primaryAddressRef'] as DocumentReference<Map<String, dynamic>>?,
    );
  }

  /// Creates a UsersData instance from a Firestore DocumentSnapshot.
  /// Required for Firestore `withConverter`.
  factory UsersData.fromFirestore(
    DocumentSnapshot<Map<String, dynamic>> snapshot,
    SnapshotOptions? options,
  ) {
    final data = snapshot.data();
    if (data == null) {
      throw Exception('Snapshot data was null!');
    }
    // We can reuse the existing fromJson logic.
    // Add the document ID to the data map if you want it in the model.
    // data['id'] = snapshot.id; // Optional: include document ID
    return UsersData.fromJson(data);
  }

  /// Converts this UsersData instance to a Map suitable for Firestore.
  Map<String, dynamic> toJson() {
    return {








      'displayName': displayName,








      'email': email,








      'createdAt': createdAt,








      'lastLogin': lastLogin,








      'age': age,








      'isActive': isActive,








      'settings': settings,








      'tags': tags,








      'primaryAddressRef': primaryAddressRef,
    };
  }

  /// Converts this UsersData instance to a Map suitable for Firestore.
  /// Required for Firestore `withConverter`.
  Map<String, Object?> toFirestore(SetOptions? options) {
    // We can reuse the existing toJson logic.
    // Firestore expects Map<String, Object?>
    return toJson();
  }

  /// Creates a copy of this instance with potentially modified fields.
  UsersData copyWith({
    String? displayName,
    String? email,
    Timestamp? createdAt,
    Timestamp? lastLogin,
    num? age,
    bool? isActive,
    Map<String, dynamic>? settings,
    List<String>? tags,
    DocumentReference<Map<String, dynamic>>? primaryAddressRef,
  }) {
    return UsersData(
      displayName: displayName ?? this.displayName,
      email: email ?? this.email,
      createdAt: createdAt ?? this.createdAt,
      lastLogin: lastLogin ?? this.lastLogin,
      age: age ?? this.age,
      isActive: isActive ?? this.isActive,
      settings: settings ?? this.settings,
      tags: tags ?? this.tags,
      primaryAddressRef: primaryAddressRef ?? this.primaryAddressRef,
    );
  }
} // End of UsersData class

  // TODO: Add toString, equals, hashCode implementations?


/// Represents the data structure for adding a new 'Users' document.
/// Fields with default values (like server timestamps) or optional fields are nullable.
class UsersAddData implements ToJsonSerializable {


  final String displayName;


  final String email;


  final Timestamp? createdAt;


  final Timestamp? lastLogin;


  final num? age;


  final bool? isActive;


  final Map<String, dynamic>? settings;


  final List<String>? tags;


  final DocumentReference<Map<String, dynamic>>? primaryAddressRef;

  const UsersAddData({

    required this.displayName,

    required this.email,

    this.createdAt,

    this.lastLogin,

    this.age,

    this.isActive,

    this.settings,

    this.tags,

    this.primaryAddressRef,
  });

  /// Converts this instance to a Map suitable for Firestore add operation.
  /// Excludes fields that are null to avoid overwriting server-generated values.
  Map<String, Object?> toJson() {
    final map = <String, Object?>{};

    // Required fields are always included
    // TODO: Handle nested toJson if needed for complex types
    map['displayName'] = displayName;

    // Required fields are always included
    // TODO: Handle nested toJson if needed for complex types
    map['email'] = email;

    // Only include non-null values in the map for optional fields
    if (createdAt != null) {
      // TODO: Handle nested toJson if needed for complex types
      map['createdAt'] = createdAt;
    }

    // Only include non-null values in the map for optional fields
    if (lastLogin != null) {
      // TODO: Handle nested toJson if needed for complex types
      map['lastLogin'] = lastLogin;
    }

    // Only include non-null values in the map for optional fields
    if (age != null) {
      // TODO: Handle nested toJson if needed for complex types
      map['age'] = age;
    }

    // Only include non-null values in the map for optional fields
    if (isActive != null) {
      // TODO: Handle nested toJson if needed for complex types
      map['isActive'] = isActive;
    }

    // Only include non-null values in the map for optional fields
    if (settings != null) {
      // TODO: Handle nested toJson if needed for complex types
      map['settings'] = settings;
    }

    // Only include non-null values in the map for optional fields
    if (tags != null) {
      // TODO: Handle nested toJson if needed for complex types
      map['tags'] = tags;
    }

    // Only include non-null values in the map for optional fields
    if (primaryAddressRef != null) {
      // TODO: Handle nested toJson if needed for complex types
      map['primaryAddressRef'] = primaryAddressRef;
    }
    return map;
  }
}