/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
// Import other necessary packages if needed



/// Represents the data structure for a 'Users' document.
/// Description: Stores user profile information.
class UsersData {
  /// User's public display name (string, required)
  final String displayName;
  /// email (string, required)
  final String email;
  /// Timestamp when the user was created (timestamp)
  final Timestamp? createdAt;
  /// lastLogin (timestamp)
  final Timestamp? lastLogin;
  /// age (number)
  final num? age;
  /// isActive (boolean)
  final bool? isActive;
  /// settings (map)
  final Map<String, dynamic>? settings;
  /// tags (array)
  final List<String>? tags;
  /// primaryAddressRef (reference)
  final DocumentReference<AddressesData>? primaryAddressRef;

  const UsersData({
    required this.displayName,
    required this.email,
    this.createdAt,
    this.lastLogin,
    this.age,
    this.isActive,
    this.settings,
    this.tags,
    this.primaryAddressRef,
  });

  /// Creates a UsersData instance from a Firestore DocumentSnapshot.
  factory UsersData.fromSnapshot(DocumentSnapshot snapshot) {
    final data = snapshot.data() as Map<String, dynamic>?;
    if (data == null) {
        throw Exception("Document data was null!"); // Or handle differently
    }
    return UsersData(
      displayName: data['displayName'] as String, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      email: data['email'] as String, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      createdAt: data['createdAt'] as Timestamp?, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      lastLogin: data['lastLogin'] as Timestamp?, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      age: data['age'] as num?, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      isActive: data['isActive'] as bool?, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      settings: data['settings'] as Map<String, dynamic>?, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      tags: data['tags'] as List<String>?, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
      primaryAddressRef: data['primaryAddressRef'] as DocumentReference<AddressesData>?, // TODO: Add type casting/parsing for complex types (Timestamp, Ref, Map, List<T>)
    );
  }

   /// Creates a UsersData instance from a Map.
  factory UsersData.fromJson(Map<String, dynamic> data) {
     return UsersData(
      displayName: data['displayName'] as String, // TODO: Add type casting/parsing
      email: data['email'] as String, // TODO: Add type casting/parsing
      createdAt: data['createdAt'] as Timestamp?, // TODO: Add type casting/parsing
      lastLogin: data['lastLogin'] as Timestamp?, // TODO: Add type casting/parsing
      age: data['age'] as num?, // TODO: Add type casting/parsing
      isActive: data['isActive'] as bool?, // TODO: Add type casting/parsing
      settings: data['settings'] as Map<String, dynamic>?, // TODO: Add type casting/parsing
      tags: data['tags'] as List<String>?, // TODO: Add type casting/parsing
      primaryAddressRef: data['primaryAddressRef'] as DocumentReference<AddressesData>?, // TODO: Add type casting/parsing
    );
  }

  /// Converts this UsersData instance to a Map suitable for Firestore.
  Map<String, dynamic> toJson() {
    return {
      'displayName': displayName, // TODO: Handle nested toJson for maps/lists/refs?
      'email': email, // TODO: Handle nested toJson for maps/lists/refs?
      'createdAt': createdAt, // TODO: Handle nested toJson for maps/lists/refs?
      'lastLogin': lastLogin, // TODO: Handle nested toJson for maps/lists/refs?
      'age': age, // TODO: Handle nested toJson for maps/lists/refs?
      'isActive': isActive, // TODO: Handle nested toJson for maps/lists/refs?
      'settings': settings, // TODO: Handle nested toJson for maps/lists/refs?
      'tags': tags, // TODO: Handle nested toJson for maps/lists/refs?
      'primaryAddressRef': primaryAddressRef, // TODO: Handle nested toJson for maps/lists/refs?
    };
  }

  /// Creates a copy of this instance with potentially modified fields.
  UsersData copyWith({
    String? displayName,
    String? email,
    Timestamp? createdAt,
    Timestamp? lastLogin,
    num? age,
    bool? isActive,
    Map<String, dynamic>? settings,
    List<String>? tags,
    DocumentReference<AddressesData>? primaryAddressRef,
  }) {
    return UsersData(
      displayName: displayName ?? this.displayName,
      email: email ?? this.email,
      createdAt: createdAt ?? this.createdAt,
      lastLogin: lastLogin ?? this.lastLogin,
      age: age ?? this.age,
      isActive: isActive ?? this.isActive,
      settings: settings ?? this.settings,
      tags: tags ?? this.tags,
      primaryAddressRef: primaryAddressRef ?? this.primaryAddressRef,
    );
  }

  // TODO: Add toString, equals, hashCode implementations?
}