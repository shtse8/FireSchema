/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import runtime types
// Import other necessary packages if needed


 



/// Represents the data structure for a nested \'UsersSettingsMap\' map.

class UsersSettingsMap implements ToJsonSerializable {

  /// theme (string)
  final String? theme;

  /// notificationsEnabled (boolean)
  final bool? notificationsEnabled;

  UsersSettingsMap({
    this.theme,
    this.notificationsEnabled,
  }); // End of constructor // Corrected join string

  /// Creates a UsersSettingsMap instance from a Map.
  factory UsersSettingsMap.fromJson(Map<String, dynamic> data) {
    return UsersSettingsMap(
      theme: data['theme'] as String?,
      notificationsEnabled: data['notificationsEnabled'] as bool?,
    );
  }

  /// Converts this UsersSettingsMap instance to a Map suitable for Firestore.
  Map<String, dynamic> toJson() {
    return {
      'theme': theme,
      'notificationsEnabled': notificationsEnabled,
    };
  }

  /// Creates a copy of this instance with potentially modified fields.
  UsersSettingsMap copyWith({
    String? theme,
    bool? notificationsEnabled,
  }) {
    return UsersSettingsMap(
      theme: theme ?? this.theme,
      notificationsEnabled: notificationsEnabled ?? this.notificationsEnabled,
    );
  }

} // End of UsersSettingsMap class

/// Represents the data structure for a 'Users' document.
/// Description: Stores user profile information.
class UsersData {

  /// User's public display name (string, required)
  final String displayName;

  /// email (string, required)
  final String email;

  /// Timestamp when the user was created (timestamp)
  final Timestamp? createdAt;

  /// lastLogin (timestamp)
  final Timestamp? lastLogin;

  /// age (number)
  final num? age;

  /// isActive (boolean)
  final bool? isActive;

  /// settings (map)
  final UsersSettingsMap? settings;

  /// tags (array)
  final List<String>? tags;

  /// primaryAddressRef (reference)
  final DocumentReference<Map<String, dynamic>>? primaryAddressRef;

  UsersData({
    required this.displayName,
    required this.email,
    this.createdAt,
    this.lastLogin,
    this.age,
    this.isActive,
    this.settings,
    this.tags,
    this.primaryAddressRef,
  })
    : assert(displayName.length >= 3, 'Users.displayName must be at least 3 characters long')
    , assert(displayName.length <= 50, 'Users.displayName must be at most 50 characters long')
    , assert(RegExp(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$').hasMatch(email), 'Users.email must match the required pattern')
    , assert((age == null || age >= 0), 'Users.age must be >= 0')
    , assert((age == null || age <= 130), 'Users.age must be <= 130'); // End of constructor // Corrected join string

  /// Creates a UsersData instance from a Map.
  factory UsersData.fromJson(Map<String, dynamic> data) {
    return UsersData(
      displayName: data['displayName'] as String? ?? (throw Exception("Missing required field: displayName in input data")),
      email: data['email'] as String? ?? (throw Exception("Missing required field: email in input data")),
      createdAt: data['createdAt'] as Timestamp?,
      lastLogin: data['lastLogin'] as Timestamp?,
      age: data['age'] as num?,
      isActive: data['isActive'] as bool?,
      settings: data['settings'] == null ? null : UsersSettingsMap.fromJson(data['settings'] as Map<String, dynamic>),
      tags: (data['tags'] as List<dynamic>?)?.map((e) => e as String).toList(),
      primaryAddressRef: data['primaryAddressRef'] as DocumentReference<Map<String, dynamic>>?,
    );
  }

  /// Creates a UsersData instance from a Firestore DocumentSnapshot.
  factory UsersData.fromSnapshot(DocumentSnapshot snapshot) {
    final data = snapshot.data() as Map<String, dynamic>?;
    if (data == null) {
        // Escape the $ to prevent EJS interpolation
        throw Exception("Document data was null on snapshot ${snapshot.id}!");
    }
    return UsersData.fromJson(data); // Reuse fromJson logic
  }

  /// Creates a UsersData instance from a Firestore DocumentSnapshot.
  /// Required for Firestore `withConverter`.
  factory UsersData.fromFirestore(
    DocumentSnapshot<Map<String, dynamic>> snapshot,
    SnapshotOptions? options,
  ) {
    final data = snapshot.data();
    if (data == null) {
      throw Exception('Snapshot data was null!');
    }
    // We can reuse the existing fromJson logic.
    // data['id'] = snapshot.id; // Optional: include document ID
    return UsersData.fromJson(data);
  }

  /// Converts this UsersData instance to a Map suitable for Firestore.
  Map<String, dynamic> toJson() {
    return {
      'displayName': displayName,
      'email': email,
      'createdAt': createdAt,
      'lastLogin': lastLogin,
      'age': age,
      'isActive': isActive,
      'settings': settings?.toJson(),
      'tags': tags,
      'primaryAddressRef': primaryAddressRef,
    };
  }

  /// Converts this UsersData instance to a Map suitable for Firestore.
  /// Required for Firestore `withConverter`.
  Map<String, Object?> toFirestore(SetOptions? options) {
    // We can reuse the existing toJson logic.
    return toJson();
  }

  /// Creates a copy of this instance with potentially modified fields.
  UsersData copyWith({
    String? displayName,
    String? email,
    Timestamp? createdAt,
    Timestamp? lastLogin,
    num? age,
    bool? isActive,
    UsersSettingsMap? settings,
    List<String>? tags,
    DocumentReference<Map<String, dynamic>>? primaryAddressRef,
  }) {
    return UsersData(
      displayName: displayName ?? this.displayName,
      email: email ?? this.email,
      createdAt: createdAt ?? this.createdAt,
      lastLogin: lastLogin ?? this.lastLogin,
      age: age ?? this.age,
      isActive: isActive ?? this.isActive,
      settings: settings ?? this.settings,
      tags: tags ?? this.tags,
      primaryAddressRef: primaryAddressRef ?? this.primaryAddressRef,
    );
  }

} // End of UsersData class


/// Represents the data structure for adding a new 'Users' document.
/// Fields with default values (like server timestamps) or optional fields are nullable.
class UsersAddData implements ToJsonSerializable {


  /// User's public display name (string, required)
  final String displayName;

  /// email (string, required)
  final String email;

  /// Timestamp when the user was created (timestamp)
  final Timestamp? createdAt;

  /// lastLogin (timestamp)
  final Timestamp? lastLogin;

  /// age (number)
  final num? age;

  /// isActive (boolean)
  final bool? isActive;

  /// settings (map)
  final UsersSettingsMap? settings;

  /// tags (array)
  final List<String>? tags;

  /// primaryAddressRef (reference)
  final DocumentReference<Map<String, dynamic>>? primaryAddressRef;

  const UsersAddData({
    required this.displayName,
    required this.email,
    this.createdAt,
    this.lastLogin,
    this.age,
    this.isActive,
    this.settings,
    this.tags,
    this.primaryAddressRef,
  });

  /// Converts this instance to a Map suitable for Firestore add operation.
  /// Excludes fields that are null to avoid overwriting server-generated values.
  @override // Indicate override of interface method
  Map<String, Object?> toJson() {
    final map = <String, Object?>{};


    // Required fields are always included
    map['displayName'] = displayName;

    // Required fields are always included
    map['email'] = email;

    // Only include non-null values in the map for optional fields
    if (createdAt != null) {
      map['createdAt'] = createdAt;
    }

    // Only include non-null values in the map for optional fields
    if (lastLogin != null) {
      map['lastLogin'] = lastLogin;
    }

    // Only include non-null values in the map for optional fields
    if (age != null) {
      map['age'] = age;
    }

    // Only include non-null values in the map for optional fields
    if (isActive != null) {
      map['isActive'] = isActive;
    }

    // Only include non-null values in the map for optional fields
    if (settings != null) {
      map['settings'] = settings?.toJson();
    }

    // Only include non-null values in the map for optional fields
    if (tags != null) {
      map['tags'] = tags;
    }

    // Only include non-null values in the map for optional fields
    if (primaryAddressRef != null) {
      map['primaryAddressRef'] = primaryAddressRef;
    }
    return map;
  }
}


/// Represents the data structure for updating an existing 'Users' document.
/// All fields are optional, allowing for partial updates.
class UsersUpdateData implements ToJsonSerializable {

  /// User's public display name (string)
  final String? displayName;

  /// email (string)
  final String? email;

  /// Timestamp when the user was created (timestamp)
  final Timestamp? createdAt;

  /// lastLogin (timestamp)
  final Timestamp? lastLogin;

  /// age (number)
  final num? age;

  /// isActive (boolean)
  final bool? isActive;

  /// settings (map)
  final UsersSettingsMap? settings;

  /// tags (array)
  final List<String>? tags;

  /// primaryAddressRef (reference)
  final DocumentReference<Map<String, dynamic>>? primaryAddressRef;

  UsersUpdateData({ // Not const
    this.displayName,
    this.email,
    this.createdAt,
    this.lastLogin,
    this.age,
    this.isActive,
    this.settings,
    this.tags,
    this.primaryAddressRef,
  });

  /// Converts this instance to a Map suitable for Firestore update operation.
  /// Only includes fields that are not null.
  @override // Indicate override of interface method
  Map<String, Object?> toJson() {
    final map = <String, Object?>{};

    // Only include non-null values in the map for updates
    if (displayName != null) {
      map['displayName'] = displayName;
    }

    // Only include non-null values in the map for updates
    if (email != null) {
      map['email'] = email;
    }

    // Only include non-null values in the map for updates
    if (createdAt != null) {
      map['createdAt'] = createdAt;
    }

    // Only include non-null values in the map for updates
    if (lastLogin != null) {
      map['lastLogin'] = lastLogin;
    }

    // Only include non-null values in the map for updates
    if (age != null) {
      map['age'] = age;
    }

    // Only include non-null values in the map for updates
    if (isActive != null) {
      map['isActive'] = isActive;
    }

    // Only include non-null values in the map for updates
    if (settings != null) {
      map['settings'] = settings?.toJson();
    }

    // Only include non-null values in the map for updates
    if (tags != null) {
      map['tags'] = tags;
    }

    // Only include non-null values in the map for updates
    if (primaryAddressRef != null) {
      map['primaryAddressRef'] = primaryAddressRef;
    }
    return map;
  }
}
