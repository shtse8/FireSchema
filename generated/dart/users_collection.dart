/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import 'package:cloud_firestore/cloud_firestore.dart';
// Runtime Imports
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import the runtime package

// Local Imports
import 'users_data.dart';
import 'users_query.dart';
import 'users_update.dart';





import './users/posts_collection.dart'; // Import subcollection class
import './users/posts_data.dart'; // Import subcollection data class



/// Typed reference to the 'users' collection, extending BaseCollectionRef.
class UsersCollection extends BaseCollectionRef<UsersData, UsersAddData> { // Use the specific AddData type

  /// Creates a UsersCollection instance.
  UsersCollection({
    required FirebaseFirestore firestore,
    DocumentReference? parentRef, // Optional parent ref
  }) : super(
          firestore: firestore,
          collectionId: 'users',
          parentRef: parentRef,
          // Provide the fromFirestore and toFirestore converters specific to UsersData
          fromFirestore: UsersData.fromFirestore,
          toFirestore: (data, options) => data.toFirestore(options),
          // Pass schema details if needed by base class features (like defaults)
          schema: const { // Example schema structure - adjust if BaseCollectionRef uses it differently
            'fields': {
              'displayName': { 'defaultValue': null },
              'email': { 'defaultValue': null },
              'createdAt': { 'defaultValue': "serverTimestamp" },
              'lastLogin': { 'defaultValue': null },
              'age': { 'defaultValue': null },
              'isActive': { 'defaultValue': true },
              'settings': { 'defaultValue': null },
              'tags': { 'defaultValue': null },
              'primaryAddressRef': { 'defaultValue': null },
            },
          },
        );

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /// Creates a new UsersQueryBuilder instance for this collection.
  UsersQueryBuilder query() {
    // Returns the specific generated QueryBuilder
    return UsersQueryBuilder(
      firestore: firestore, // Pass firestore instance
      collectionRef: ref, // Pass the typed collection reference
    );
  }

  /// Creates a new UsersUpdateBuilder instance for the document with the given ID.
  UsersUpdateBuilder update(String id) {
    // Returns the specific generated UpdateBuilder
    return UsersUpdateBuilder(docRef: doc(id)); // Pass the typed document reference
  }

  // --- Subcollection Accessors ---




  /// Access the 'posts' subcollection for a specific document.
  PostsCollection posts(String documentId) {
    // Use the helper method from BaseCollectionRef
    // Need to define the factory function for the subcollection class
    // Call subCollection helper with positional arguments
    return subCollection(
      documentId, // parentId
      'posts', // subCollectionId
      // subCollectionFactory (factory function)
      // subCollectionFactory (Simplified signature matching the updated BaseCollectionRef helper)
      ({
        required FirebaseFirestore firestore,
        required String collectionId,
        CollectionSchema? schema,
        required DocumentReference? parentRef,
      }) => PostsCollection(firestore: firestore, parentRef: parentRef),
      // subFromFirestore (Use the correct sub-model name)
      PostsData.fromFirestore,
      // subToFirestore
      (data, options) => (data as PostsData).toFirestore(options),
      // subSchema (optional)
      const { // Construct the schema object for the subcollection
        'fields': {
          'title': { 'defaultValue': null },
          'content': { 'defaultValue': null },
          'publishedAt': { 'defaultValue': null },
        },
      },
    );
  }



  // --- Custom Methods Placeholder ---
}