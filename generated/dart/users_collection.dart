/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import './users_data.dart'; // Import the generated model type
import './users_query.dart';
 // Import the generated query builder
import './users_update.dart'; // Import the generated update builder






import '../users/posts_collection.dart'; // Adjust path for subcollection



// TODO: Define AddData/UpdateData types if desired (less common in Dart than TS, often handled by method params)
// For example, using named parameters in `add` and `update` methods.

/// Typed reference and utilities for the 'users' collection.
class UsersCollection {
  final FirebaseFirestore firestore;
  late final CollectionReference<UsersData> ref;
  final DocumentReference? parentRef; // Optional parent ref for subcollections

  /// Constructor for the collection reference.
  ///
  /// [firestore] The Firestore instance.
  /// [parentRef] Optional DocumentReference of the parent document (for subcollections).
  UsersCollection(this.firestore, [this.parentRef]) {
    if (parentRef != null) {
      // Subcollection reference
      ref = parentRef!.collection('users').withConverter<UsersData>(
            fromFirestore: (snapshot, _) => UsersData.fromSnapshot(snapshot),
            toFirestore: (UsersData data, _) => data.toJson(),
          );
    } else {
      // Root collection reference
  
    ref = firestore.collection('users').withConverter<UsersData>(
          fromFirestore: (snapshot, _) => UsersData.fromSnapshot(snapshot),
          toFirestore: (UsersData data, _) => data.toJson(),
        );
    }
  }

  /// Returns the DocumentReference for a given ID.
  DocumentReference<UsersData> doc(String id) {
    return ref.doc(id);
  }

  /// Adds a new document with the given data, returning the new DocumentReference.
  Future<DocumentReference<UsersData>> add(UsersData data) async {
    final Map<String, dynamic> json = data.toJson();
    // Apply server timestamps if the corresponding field is null
    if (data.createdAt == null) {
      json['createdAt'] = FieldValue.serverTimestamp();
    }
    // Use the untyped reference to add data with FieldValue placeholders
    final newDocRef = await ref.firestore.collection(ref.path).add(json);
    // Return a typed reference
    return newDocRef.withConverter< UsersData>(
      fromFirestore: ref.converter.fromFirestore,
      toFirestore: ref.converter.toFirestore,
    );
  }

  /// Sets the data for a document, overwriting existing data.
  Future<void> set(String id, UsersData data) async {
    // TODO: Consider if 'set' needs different data handling than 'add'.
    await doc(id).set(data);
  }

  /// Creates a new UpdateBuilder instance for the document with the given ID.
  /// Use the builder to define fields to update and then call commit().
  UsersUpdateBuilder update(String id) {
    // Note: We pass the typed DocumentReference from this class.
    // The UpdateBuilder will use the underlying untyped reference for the actual update operation
    // because the update data might contain FieldValue sentinel values.
    return UsersUpdateBuilder(doc(id));
  }

  /// Deletes a document.
  Future<void> delete(String id) async {
    await doc(id).delete();
  }

  /// Reads a single document.
  Future<UsersData?> get(String id) async {
    final snapshot = await doc(id).get();
    return snapshot.data(); // Returns typed data directly thanks to withConverter
  }

  /// Creates a new QueryBuilder instance for this collection.
  UsersQueryBuilder query() {
    return UsersQueryBuilder(firestore, ref);
  }

  // --- Subcollection Accessors ---



  /// Access the 'posts' subcollection for a specific document.
  PostsCollection posts(String documentId) {
    // Note: It's crucial that the DocumentReference passed to the subcollection's
    // constructor is *untyped* (or DocumentReference<Map<String, dynamic>>)
    // because Firestore subcollection paths don't inherit the parent's converter.
    final untypedParentDocRef = parentRef != null
        ? parentRef!.collection('users').doc(documentId)
        : firestore.collection('users').doc(documentId);

    return PostsCollection(firestore, untypedParentDocRef);
  }


}