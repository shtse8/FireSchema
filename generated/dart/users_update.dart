/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import './users_data.dart'; // Import the generated model type

/// Typed builder for creating update operations for 'users' documents.
class UsersUpdateBuilder {
  final DocumentReference<UsersData> _docRef;
  final Map<String, dynamic> _updateData = {};

  UsersUpdateBuilder(this._docRef);

  // --- Field Setters ---
  /// Sets the value for the 'displayName' field.
  UsersUpdateBuilder setDisplayName(String value) {
    _updateData['displayName'] = value;
    return this;
  }


  /// Sets the value for the 'email' field.
  UsersUpdateBuilder setEmail(String value) {
    _updateData['email'] = value;
    return this;
  }


  /// Sets the value for the 'createdAt' field.
  UsersUpdateBuilder setCreatedAt(Timestamp? value) {
    _updateData['createdAt'] = value;
    return this;
  }

  /// Sets the 'createdAt' field to the server timestamp.
  UsersUpdateBuilder setCreatedAtToServerTimestamp() {
    _updateData['createdAt'] = FieldValue.serverTimestamp();
    return this;
  }
  /// Deletes the 'createdAt' field.
  UsersUpdateBuilder deleteCreatedAt() {
    _updateData['createdAt'] = FieldValue.delete();
    return this;
  }

  /// Sets the value for the 'lastLogin' field.
  UsersUpdateBuilder setLastLogin(Timestamp? value) {
    _updateData['lastLogin'] = value;
    return this;
  }

  /// Deletes the 'lastLogin' field.
  UsersUpdateBuilder deleteLastLogin() {
    _updateData['lastLogin'] = FieldValue.delete();
    return this;
  }

  /// Sets the value for the 'age' field.
  UsersUpdateBuilder setAge(num? value) {
    _updateData['age'] = value;
    return this;
  }

  /// Atomically increments the 'age' field.
  UsersUpdateBuilder incrementAge(num value) {
    _updateData['age'] = FieldValue.increment(value.toDouble()); // Use toDouble for increment
    return this;
  }
  /// Deletes the 'age' field.
  UsersUpdateBuilder deleteAge() {
    _updateData['age'] = FieldValue.delete();
    return this;
  }

  /// Sets the value for the 'isActive' field.
  UsersUpdateBuilder setIsActive(bool? value) {
    _updateData['isActive'] = value;
    return this;
  }

  /// Deletes the 'isActive' field.
  UsersUpdateBuilder deleteIsActive() {
    _updateData['isActive'] = FieldValue.delete();
    return this;
  }

  /// Sets the value for the 'settings' field.
  UsersUpdateBuilder setSettings(Map<String, dynamic>? value) {
    _updateData['settings'] = value;
    return this;
  }

  /// Deletes the 'settings' field.
  UsersUpdateBuilder deleteSettings() {
    _updateData['settings'] = FieldValue.delete();
    return this;
  }

  /// Sets the value for the 'tags' field.
  UsersUpdateBuilder setTags(List<String>? value) {
    _updateData['tags'] = value;
    return this;
  }

  /// Atomically adds elements to the 'tags' array field.
  UsersUpdateBuilder arrayUnionTags(List<String> values) {
    _updateData['tags'] = FieldValue.arrayUnion(values);
    return this;
  }

  /// Atomically removes elements from the 'tags' array field.
  UsersUpdateBuilder arrayRemoveTags(List<String> values) {
    _updateData['tags'] = FieldValue.arrayRemove(values);
    return this;
  }
  /// Deletes the 'tags' field.
  UsersUpdateBuilder deleteTags() {
    _updateData['tags'] = FieldValue.delete();
    return this;
  }

  /// Sets the value for the 'primaryAddressRef' field.
  UsersUpdateBuilder setPrimaryAddressRef(DocumentReference<Map<String, dynamic>>? value) {
    _updateData['primaryAddressRef'] = value;
    return this;
  }

  /// Deletes the 'primaryAddressRef' field.
  UsersUpdateBuilder deletePrimaryAddressRef() {
    _updateData['primaryAddressRef'] = FieldValue.delete();
    return this;
  }

  // --- End Field Setters ---

  /// Commits the update operations to Firestore.
  Future<void> commit() async {
    if (_updateData.isEmpty) {
      print('Warning: Update commit called with no changes specified.');
      return;
    }
    // Use the untyped reference for update, as the builder might contain FieldValues
    await _docRef.reference.update(_updateData);
  }
}