/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import 'package:cloud_firestore/cloud_firestore.dart';
// Runtime Imports
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import the runtime package

// Local Imports
import '<%= fileNameBase %>_data.dart';

/// A typed builder for creating update operations for '<%- collection.collectionId %>' documents, extending BaseUpdateBuilder.
class <%- modelName %>UpdateBuilder extends BaseUpdateBuilder<<%- modelName %>Data> {

  /// Creates a <%- modelName %>UpdateBuilder instance.
  <%- modelName %>UpdateBuilder({required DocumentReference<<%- modelName %>Data> docRef})
      : super(docRef: docRef);

  // Constructor and internal updateData map are inherited from BaseUpdateBuilder

  // --- Field Setters ---
<% Object.values(collection.fields).forEach(field => { -%>
<%   const dartType = getDartType(field, options); -%>
  /// Sets the value for the '<%- field.fieldName %>' field.
  <%- modelName %>UpdateBuilder set<%- capitalizeFirstLetter(field.fieldName) %>(<%- dartType %><%- !field.required ? '?' : '' %> value) {
    // Call the protected set method from the base class
    return set('<%- field.fieldName %>', value) as <%- modelName %>UpdateBuilder; // Cast back
  }

<%   // --- Atomic Operations --- -%>
<%   if (field.type === 'number') { -%>
  /// Atomically increments the '<%- field.fieldName %>' field by the given value.
  <%- modelName %>UpdateBuilder increment<%- capitalizeFirstLetter(field.fieldName) %>(num value) {
    // Call the protected increment helper
    return increment('<%- field.fieldName %>', value) as <%- modelName %>UpdateBuilder; // Cast back
  }
<%   } -%>
<%   if (field.type === 'array') { -%>
<%     const itemType = field.items ? getDartType(field.items, options) : 'dynamic'; -%>
  /// Atomically adds elements to the '<%- field.fieldName %>' array field.
  <%- modelName %>UpdateBuilder arrayUnion<%- capitalizeFirstLetter(field.fieldName) %>(List<<%- itemType %>> values) {
    // Call the protected arrayUnion helper
    return arrayUnion('<%- field.fieldName %>', values) as <%- modelName %>UpdateBuilder; // Cast back
  }

  /// Atomically removes elements from the '<%- field.fieldName %>' array field.
  <%- modelName %>UpdateBuilder arrayRemove<%- capitalizeFirstLetter(field.fieldName) %>(List<<%- itemType %>> values) {
    // Call the protected arrayRemove helper
    return arrayRemove('<%- field.fieldName %>', values) as <%- modelName %>UpdateBuilder; // Cast back
  }
<%   } -%>
<%   if (field.type === 'timestamp' && field.defaultValue === 'serverTimestamp') { -%>
  /// Sets the '<%- field.fieldName %>' field to the server timestamp.
  <%- modelName %>UpdateBuilder set<%- capitalizeFirstLetter(field.fieldName) %>ToServerTimestamp() {
    // Call the protected serverTimestamp helper
    return serverTimestamp('<%- field.fieldName %>') as <%- modelName %>UpdateBuilder; // Cast back
  }
<%   } -%>
<%   if (!field.required) { -%>
  /// Deletes the '<%- field.fieldName %>' field.
  <%- modelName %>UpdateBuilder delete<%- capitalizeFirstLetter(field.fieldName) %>() {
    // Call the protected deleteField helper
    return deleteField('<%- field.fieldName %>') as <%- modelName %>UpdateBuilder; // Cast back
  }
<%   } -%>

<% }); -%>
  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
}