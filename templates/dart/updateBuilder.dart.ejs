/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import './<%- toSnakeCase(collection.collectionId) %>_data.dart'; // Import the generated model type

/// Typed builder for creating update operations for '<%- collection.collectionId %>' documents.
class <%- modelName %>UpdateBuilder {
  final DocumentReference<<%- modelName %>Data> _docRef;
  final Map<String, dynamic> _updateData = {};

  <%- modelName %>UpdateBuilder(this._docRef);

  // --- Field Setters ---
<% Object.values(collection.fields).forEach(field => { -%>
<%   const dartType = getDartType(field, options); -%>
<%   const nullableDartType = `${dartType}${field.required ? '' : '?'}`; -%>
  /// Sets the value for the '<%- field.fieldName %>' field.
  <%- modelName %>UpdateBuilder set<%- capitalizeFirstLetter(field.fieldName) %>(<%- nullableDartType %> value) {
    _updateData['<%- field.fieldName %>'] = value;
    return this;
  }

<%   // --- Atomic Operations --- -%>
<%   if (field.type === 'number') { -%>
  /// Atomically increments the '<%- field.fieldName %>' field.
  <%- modelName %>UpdateBuilder increment<%- capitalizeFirstLetter(field.fieldName) %>(num value) {
    _updateData['<%- field.fieldName %>'] = FieldValue.increment(value.toDouble()); // Use toDouble for increment
    return this;
  }
<%   } -%>
<%   if (field.type === 'array') { -%>
<%     const itemType = field.items ? getDartType(field.items, options) : 'dynamic'; -%>
  /// Atomically adds elements to the '<%- field.fieldName %>' array field.
  <%- modelName %>UpdateBuilder arrayUnion<%- capitalizeFirstLetter(field.fieldName) %>(List<<%- itemType %>> values) {
    _updateData['<%- field.fieldName %>'] = FieldValue.arrayUnion(values);
    return this;
  }

  /// Atomically removes elements from the '<%- field.fieldName %>' array field.
  <%- modelName %>UpdateBuilder arrayRemove<%- capitalizeFirstLetter(field.fieldName) %>(List<<%- itemType %>> values) {
    _updateData['<%- field.fieldName %>'] = FieldValue.arrayRemove(values);
    return this;
  }
<%   } -%>
<%   if (field.type === 'timestamp' && field.defaultValue === 'serverTimestamp') { -%>
  /// Sets the '<%- field.fieldName %>' field to the server timestamp.
  <%- modelName %>UpdateBuilder set<%- capitalizeFirstLetter(field.fieldName) %>ToServerTimestamp() {
    _updateData['<%- field.fieldName %>'] = FieldValue.serverTimestamp();
    return this;
  }
<%   } -%>
<%   if (!field.required) { -%>
  /// Deletes the '<%- field.fieldName %>' field.
  <%- modelName %>UpdateBuilder delete<%- capitalizeFirstLetter(field.fieldName) %>() {
    _updateData['<%- field.fieldName %>'] = FieldValue.delete();
    return this;
  }
<%   } -%>

<% }); -%>
  // --- End Field Setters ---

  /// Commits the update operations to Firestore.
  Future<void> commit() async {
    if (_updateData.isEmpty) {
      print('Warning: Update commit called with no changes specified.');
      return;
    }
    // Use the untyped reference for update, as the builder might contain FieldValues
    await _docRef.reference.update(_updateData);
  }
}