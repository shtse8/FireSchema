/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import './<%- toSnakeCase(collection.collectionId) %>_data.dart'; // Import the generated model type
import './<%- toSnakeCase(collection.collectionId) %>_query.dart';
 // Import the generated query builder
import './<%- toSnakeCase(collection.collectionId) %>_update.dart'; // Import the generated update builder

<%# Generate imports for subcollections %>
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
<%     const subFileNameBase = toSnakeCase(subId); %>
import '../<%= collection.collectionId %>/<%= subFileNameBase %>_collection.dart'; // Adjust path for subcollection
<%   }); %>
<% } %>

// TODO: Define AddData/UpdateData types if desired (less common in Dart than TS, often handled by method params)
// For example, using named parameters in `add` and `update` methods.

/// Typed reference and utilities for the '<%- collection.collectionId %>' collection.
class <%- modelName %>Collection {
  final FirebaseFirestore firestore;
  late final CollectionReference<<%- modelName %>Data> ref;
  final DocumentReference? parentRef; // Optional parent ref for subcollections

  /// Constructor for the collection reference.
  ///
  /// [firestore] The Firestore instance.
  /// [parentRef] Optional DocumentReference of the parent document (for subcollections).
  <%- modelName %>Collection(this.firestore, [this.parentRef]) {
    if (parentRef != null) {
      // Subcollection reference
      ref = parentRef!.collection('<%- collection.collectionId %>').withConverter<<%- modelName %>Data>(
            fromFirestore: (snapshot, _) => <%- modelName %>Data.fromSnapshot(snapshot),
            toFirestore: (<%- modelName %>Data data, _) => data.toJson(),
          );
    } else {
      // Root collection reference
  
    ref = firestore.collection('<%- collection.collectionId %>').withConverter<<%- modelName %>Data>(
          fromFirestore: (snapshot, _) => <%- modelName %>Data.fromSnapshot(snapshot),
          toFirestore: (<%- modelName %>Data data, _) => data.toJson(),
        );
    }
  }

  /// Returns the DocumentReference for a given ID.
  DocumentReference<<%- modelName %>Data> doc(String id) {
    return ref.doc(id);
  }

  /// Adds a new document with the given data, returning the new DocumentReference.
  Future<DocumentReference<<%- modelName %>Data>> add(<%- modelName %>Data data) async {
    // TODO: Handle default values like serverTimestamp automatically?
    //       This might involve creating a separate 'AddData' type or modifying 'toJson'.
    return ref.add(data);
  }

  /// Sets the data for a document, overwriting existing data.
  Future<void> set(String id, <%- modelName %>Data data) async {
    // TODO: Consider if 'set' needs different data handling than 'add'.
    await doc(id).set(data);
  }

  /// Creates a new UpdateBuilder instance for the document with the given ID.
  /// Use the builder to define fields to update and then call commit().
  <%- modelName %>UpdateBuilder update(String id) {
    // Note: We pass the typed DocumentReference from this class.
    // The UpdateBuilder will use the underlying untyped reference for the actual update operation
    // because the update data might contain FieldValue sentinel values.
    return <%- modelName %>UpdateBuilder(doc(id));
  }

  /// Deletes a document.
  Future<void> delete(String id) async {
    await doc(id).delete();
  }

  /// Reads a single document.
  Future<<%- modelName %>Data?> get(String id) async {
    final snapshot = await doc(id).get();
    return snapshot.data(); // Returns typed data directly thanks to withConverter
  }

  /// Creates a new QueryBuilder instance for this collection.
  <%- modelName %>QueryBuilder query() {
    return <%- modelName %>QueryBuilder(firestore, ref);
  }

  // --- Subcollection Accessors ---
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
  /// Access the '<%- subId %>' subcollection for a specific document.
  <%- subModelName %>Collection <%- subId %>(String documentId) {
    // Note: It's crucial that the DocumentReference passed to the subcollection's
    // constructor is *untyped* (or DocumentReference<Map<String, dynamic>>)
    // because Firestore subcollection paths don't inherit the parent's converter.
    final untypedParentDocRef = parentRef != null
        ? parentRef!.collection('<%- collection.collectionId %>').doc(documentId)
        : firestore.collection('<%- collection.collectionId %>').doc(documentId);

    return <%- subModelName %>Collection(firestore, untypedParentDocRef);
  }
<%   }); %>
<% } %>
}