/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import 'package:cloud_firestore/cloud_firestore.dart';
// Runtime Imports
import 'package:fireschema_dart_runtime/fireschema_dart_runtime.dart'; // Import the runtime package

// Local Imports
import '<%= fileNameBase %>_data.dart';
import '<%= fileNameBase %>_query.dart';
import '<%= fileNameBase %>_update.dart';
<%# Generate imports for subcollections %>
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subFileNameBase = toSnakeCase(subId); %>
<%
    // Construct relative path - assumes subcollections are in a nested directory named after the parent
    let relativePath = '';
    if (isSubcollection) {
        relativePath = `../${collection.collectionId}/${subFileNameBase}_collection.dart`; // Go up one level, then into parent dir
    } else {
        relativePath = `./${collection.collectionId}/${subFileNameBase}_collection.dart`; // Go into parent dir from current level
    }
%>
import '<%= relativePath %>';
<%   }); %>
<% } %>

/// Typed reference to the '<%- collection.collectionId %>' collection, extending BaseCollectionRef.
class <%- modelName %>Collection extends BaseCollectionRef<<%- modelName %>Data, Map<String, dynamic>> { // Using Map for AddData for now

  /// Creates a <%- modelName %>Collection instance.
  <%- modelName %>Collection({
    required FirebaseFirestore firestore,
    DocumentReference? parentRef, // Optional parent ref
  }) : super(
          firestore: firestore,
          collectionId: '<%- collection.collectionId %>',
          parentRef: parentRef,
          // Provide the fromFirestore and toFirestore converters specific to <%- modelName %>Data
          fromFirestore: <%- modelName %>Data.fromFirestore,
          toFirestore: (data, options) => data.toFirestore(options),
          // Pass schema details if needed by base class features (like defaults)
          schema: const { // Example schema structure - adjust if BaseCollectionRef uses it differently
            'fields': {
<% Object.entries(collection.fields).forEach(([fieldName, fieldDef]) => { -%>
              '<%- fieldName %>': { 'defaultValue': <%- fieldDef.defaultValue ? JSON.stringify(fieldDef.defaultValue) : 'null' %> },
<% }); -%>
            },
          },
        );

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /// Creates a new <%- modelName %>QueryBuilder instance for this collection.
  <%- modelName %>QueryBuilder query() {
    // Returns the specific generated QueryBuilder
    return <%- modelName %>QueryBuilder(
      firestore: firestore, // Pass firestore instance
      collectionRef: ref, // Pass the typed collection reference
    );
  }

  /// Creates a new <%- modelName %>UpdateBuilder instance for the document with the given ID.
  <%- modelName %>UpdateBuilder update(String id) {
    // Returns the specific generated UpdateBuilder
    return <%- modelName %>UpdateBuilder(docRef: doc(id)); // Pass the typed document reference
  }

  // --- Subcollection Accessors ---
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
<%     const subCollectionDef = collection.subcollections[subId]; %>
  /// Access the '<%- subId %>' subcollection for a specific document.
  <%- subModelName %>Collection <%- subId %>(String documentId) {
    // Use the helper method from BaseCollectionRef
    // Need to define the factory function for the subcollection class
    return subCollection(
      parentId: documentId,
      subCollectionId: '<%- subId %>',
      subCollectionFactory: ({ firestore, collectionId, fromFirestore, toFirestore, schema, parentRef }) =>
          <%- subModelName %>Collection(firestore: firestore, parentRef: parentRef), // Pass parentRef here
      // Pass the specific converters for the subcollection model
      subFromFirestore: <%- subModelName %>Data.fromFirestore,
      subToFirestore: (data, options) => (data as <%- subModelName %>Data).toFirestore(options), // Cast needed
      // Pass the schema for the subcollection if needed
      subSchema: const {
        'fields': {
<% Object.entries(subCollectionDef.fields).forEach(([fieldName, fieldDef]) => { -%>
          '<%- fieldName %>': { 'defaultValue': <%- fieldDef.defaultValue ? JSON.stringify(fieldDef.defaultValue) : 'null' %> },
<% }); -%>
        },
      },
    );
  }
<%   }); %>
<% } %>

  // --- Custom Methods Placeholder ---
}