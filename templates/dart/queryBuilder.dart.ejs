/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
// ignore_for_file: unused_import, unused_local_variable

import 'package:cloud_firestore/cloud_firestore.dart';
import './<%- toSnakeCase(collection.collectionId) %>_data.dart'; // Import the generated model type

/// Typed query builder for the '<%- collection.collectionId %>' collection.
class <%- modelName %>QueryBuilder {
  final FirebaseFirestore firestore;
  final CollectionReference<<%- modelName %>Data> collectionRef;
  Query<<%- modelName %>Data> _query; // Internal query state

  <%- modelName %>QueryBuilder(this.firestore, this.collectionRef) : _query = collectionRef;

  /// Creates a new query builder instance with the applied query constraints.
  <%- modelName %>QueryBuilder._(this.firestore, this.collectionRef, this._query);

// --- Field-specific Where Methods ---
<% Object.values(collection.fields).forEach(field => { -%>
<%   const queryInfos = getDartQueryInfoForField(field, options); -%>
<%   if (queryInfos.length > 0) { -%>
  /// Adds a query filter for the '<%- field.fieldName %>' field.
  ///
  /// Available filter parameters: <%= queryInfos.map(qi => qi.paramName).join(', ') %>
  <%- modelName %>QueryBuilder where<%- capitalizeFirstLetter(field.fieldName) %>({
<%     queryInfos.forEach((info, index) => { -%>
    <%- info.valueType %> <%- info.paramName %><%- index < queryInfos.length - 1 ? ',' : '' %>
<%     }); -%>
  }) {
    Query<<%- modelName %>Data> newQuery = _query;
<%     queryInfos.forEach(info => { -%>
    if (<%- info.paramName %> != null) newQuery = newQuery.where('<%- field.fieldName %>', <%- info.paramName %>: <%- info.paramName %>);
<%     }); -%>
    // It's recommended to only pass one operator per where<FieldName> call.
    // If multiple are passed, Firestore behavior might be unexpected or unsupported.
    return <%- modelName %>QueryBuilder._(firestore, collectionRef, newQuery);
  }
<%   } -%>
<% }); -%>
  // --- End Field-specific Where Methods ---

   /// Adds an orderBy clause to the query.
  <%- modelName %>QueryBuilder orderBy(String fieldPath, {bool descending = false}) {
     final newQuery = _query.orderBy(fieldPath, descending: descending);
     return <%- modelName %>QueryBuilder._(firestore, collectionRef, newQuery);
  }

  /// Adds a limit clause to the query.
  <%- modelName %>QueryBuilder limit(int limit) {
     final newQuery = _query.limit(limit);
     return <%- modelName %>QueryBuilder._(firestore, collectionRef, newQuery);
  }

  // TODO: Add limitToLast, startAt, startAfter, endAt, endBefore methods

  /// Executes the query and returns the matching documents.
  Future<List<<%- modelName %>Data>> get() async {
    final snapshot = await _query.get();
    return snapshot.docs.map((doc) => doc.data()).toList();
     // TODO: Consider returning document IDs as well
  }

   /// Executes the query and returns a stream of matching documents.
  Stream<List<<%- modelName %>Data>> snapshots() {
    return _query.snapshots().map((snapshot) =>
        snapshot.docs.map((doc) => doc.data()).toList());
  }
}