/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  Firestore,
  CollectionReference, // Keep for type annotation if needed, but base handles creation
  DocumentReference,
  DocumentData, // Needed for parentRef typing and subCollection helper
  // serverTimestamp, // Handled by base class applyDefaults
  // increment, // Not used directly here
  // arrayUnion, // Not used directly here
  // arrayRemove, // Not used directly here
  // deleteField, // Not used directly here
  // Basic CRUD functions (collection, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc) are handled by base
} from 'firebase/firestore';
// Runtime Imports
import { BaseCollectionRef, CollectionSchema, FieldSchema } from '@fireschema/ts-runtime'; // Removed FirestoreFunctions import

// Local Imports
import { <%- modelName %>Data } from './<%= collection.collectionId %>.types.js';
import { <%- modelName %>QueryBuilder } from './<%= collection.collectionId %>.query.js';
import { <%- modelName %>UpdateBuilder } from './<%= collection.collectionId %>.update.js';
<%# Generate imports for subcollections %>
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
import { <%- subModelName %>Collection } from './<%= collection.collectionId %>/{<%= collection.collectionId %>Id}/<%= subId %>.collection.js';
<%   }); %>
<% } %>

// Define types for data manipulation.
// AddData: Makes fields optional if they have a default value or are not required.
// NOTE: This might need refinement if base class handles defaults differently.
type <%- modelName %>AddData = {
<% Object.entries(collection.fields).forEach(([fieldName, fieldDef]) => { -%>
<%   const isOptional = !fieldDef.required || fieldDef.defaultValue !== undefined; -%>
  <%- fieldName %><%- isOptional ? '?' : '' %>: <%- modelName %>Data['<%- fieldName %>'];
<% }); -%>
};
// UpdateData: Type used by UpdateBuilder, defined there or implicitly via Firestore types.

/**
 * Typed reference to the '<%- collection.collectionId %>' collection, extending BaseCollectionRef.
 */
export class <%- modelName %>Collection extends BaseCollectionRef<<%- modelName %>Data, <%- modelName %>AddData> {

  /**
   * @param firestore The Firestore instance.
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  // Constructor needs to accept all potential args for both root and subcollection instantiation
  constructor(
    firestore: Firestore,
    collectionId: string,
    // firestoreFunctions removed
    schema?: CollectionSchema,
    parentRef?: DocumentReference<DocumentData>
  ) {
    // Process fields from the input schema to create a valid CollectionSchema for the runtime
    const processedFields: Record<string, FieldSchema> = {};
    <% Object.entries(collection.fields).forEach(([fieldName, fieldDef]) => { %>
      processedFields['<%- fieldName %>'] = {
        <% if (fieldDef.defaultValue !== undefined) { %>
        defaultValue: <%- JSON.stringify(fieldDef.defaultValue) %>,
        <% } %>
        // Add other allowed FieldSchema properties here if needed
      };
    <% }); %>
    const schemaForRuntime: CollectionSchema = { fields: processedFields };

    // Call the base class constructor, passing the resolved collectionId and schema
    // Pass firestoreFunctions to the base class constructor
    // Removed firestoreFunctions from super() call
    super(firestore, collectionId, schema ?? schemaForRuntime, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   * @param id The ID of the document to update.
   * @returns A new <%- modelName %>UpdateBuilder instance.
   */
  update(id: string): <%- modelName %>UpdateBuilder {
    // Returns the specific generated UpdateBuilder
    return new <%- modelName %>UpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   * @returns A new <%- modelName %>QueryBuilder instance.
   */
  query(): <%- modelName %>QueryBuilder {
    // Returns the specific generated QueryBuilder
    return new <%- modelName %>QueryBuilder(this.firestore, this.ref); // Pass firestore and ref
  }

  // --- Subcollection Accessors ---
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
<%     const subCollectionDef = collection.subcollections[subId]; %>
  /**
   * Access the '<%- subId %>' subcollection for a specific document.
   * @param documentId The ID of the parent '<%- collection.collectionId %>' document.
   * @returns A typed reference to the '<%- subId %>' subcollection.
   */
  <%- subId %>(documentId: string): <%- subModelName %>Collection {
    // Use the helper method from BaseCollectionRef
    // Process subcollection fields similarly to the main constructor
    const processedSubFields: Record<string, FieldSchema> = {};
    <% Object.entries(subCollectionDef.fields).forEach(([fieldName, fieldDef]) => { %>
      processedSubFields['<%- fieldName %>'] = {
        <% if (fieldDef.defaultValue !== undefined) { %>
        defaultValue: <%- JSON.stringify(fieldDef.defaultValue) %>,
        <% } %>
      };
    <% }); %>
    const subSchema: CollectionSchema = { fields: processedSubFields };
    // Pass the instance's firestoreFunctions down to the subcollection helper
    // Pass only the required arguments to the subCollection helper
    // Removed firestoreFunctions from subCollection call
    return this.subCollection(documentId, '<%- subId %>', <%- subModelName %>Collection, subSchema);
  }
<%   }); %>
<% } %>

  // --- Custom Methods Placeholder ---
  // Example: findByEmail(email: string) { ... } - Add custom query methods here if needed
}