/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  Firestore,
  CollectionReference, // Keep for type annotation if needed, but base handles creation
  DocumentReference,
  DocumentData, // Needed for parentRef typing and subCollection helper
  // serverTimestamp, // Handled by base class applyDefaults
  // increment, // Not used directly here
  // arrayUnion, // Not used directly here
  // arrayRemove, // Not used directly here
  // deleteField, // Not used directly here
  // Basic CRUD functions (collection, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc) are handled by base
} from 'firebase/firestore';
// Runtime Imports
import { BaseCollectionRef, CollectionSchema } from '@fireschema/ts-runtime'; // Adjust path/package name as needed

// Local Imports
import { <%- modelName %>Data } from './<%= collection.collectionId %>.types';
import { <%- modelName %>QueryBuilder } from './<%= collection.collectionId %>.query';
import { <%- modelName %>UpdateBuilder } from './<%= collection.collectionId %>.update';
<%# Generate imports for subcollections %>
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
import { <%- subModelName %>Collection } from './<%= collection.collectionId %>/{<%= collection.collectionId %>Id}/<%= subId %>.collection';
<%   }); %>
<% } %>

// Define types for data manipulation.
// AddData: Makes fields optional if they have a default value or are not required.
// NOTE: This might need refinement if base class handles defaults differently.
type <%- modelName %>AddData = {
<% Object.entries(collection.fields).forEach(([fieldName, fieldDef]) => { -%>
<%   const isOptional = !fieldDef.required || fieldDef.defaultValue !== undefined; -%>
  <%- fieldName %><%- isOptional ? '?' : '' %>: <%- modelName %>Data['<%- fieldName %>'];
<% }); -%>
};
// UpdateData: Type used by UpdateBuilder, defined there or implicitly via Firestore types.

/**
 * Typed reference to the '<%- collection.collectionId %>' collection, extending BaseCollectionRef.
 */
export class <%- modelName %>Collection extends BaseCollectionRef<<%- modelName %>Data, <%- modelName %>AddData> {

  /**
   * @param firestore The Firestore instance.
   * @param parentRef Optional DocumentReference of the parent document (for subcollections).
   */
  constructor(firestore: Firestore, parentRef?: DocumentReference<DocumentData>) {
    // Pass schema details (collection object) to the base class for features like default handling
    const schema: CollectionSchema = {
        fields: <%- JSON.stringify(collection.fields, null, 2) %> // Pass field definitions
        // Add subcollection info if BaseCollectionRef needs it
    };
    super(firestore, '<%- collection.collectionId %>', schema, parentRef);
  }

  // Methods like doc(), add(), set(), get(), delete() are inherited from BaseCollectionRef

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   * @param id The ID of the document to update.
   * @returns A new <%- modelName %>UpdateBuilder instance.
   */
  update(id: string): <%- modelName %>UpdateBuilder {
    // Returns the specific generated UpdateBuilder
    return new <%- modelName %>UpdateBuilder(this.doc(id));
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   * @returns A new <%- modelName %>QueryBuilder instance.
   */
  query(): <%- modelName %>QueryBuilder {
    // Returns the specific generated QueryBuilder
    return new <%- modelName %>QueryBuilder(this.firestore, this.ref);
  }

  // --- Subcollection Accessors ---
<% if (collection.subcollections) { %>
<%   Object.keys(collection.subcollections).forEach(subId => { %>
<%     const subModelName = capitalizeFirstLetter(subId); %>
<%     const subCollectionDef = collection.subcollections[subId]; %>
  /**
   * Access the '<%- subId %>' subcollection for a specific document.
   * @param documentId The ID of the parent '<%- collection.collectionId %>' document.
   * @returns A typed reference to the '<%- subId %>' subcollection.
   */
  <%- subId %>(documentId: string): <%- subModelName %>Collection {
    // Use the helper method from BaseCollectionRef
    const subSchema: CollectionSchema = { fields: <%- JSON.stringify(subCollectionDef.fields, null, 2) %> };
    return this.subCollection(documentId, '<%- subId %>', <%- subModelName %>Collection, subSchema);
  }
<%   }); %>
<% } %>

  // --- Custom Methods Placeholder ---
  // Example: findByEmail(email: string) { ... } - Add custom query methods here if needed
}