/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  Firestore,
  CollectionReference,
  DocumentReference,
  collection,
  doc,
  getDoc,
  addDoc,
  setDoc,
  updateDoc,
  deleteDoc,
  serverTimestamp,
  increment,
  arrayUnion,
  arrayRemove,
  deleteField,
  // TODO: Add query imports: query, where, orderBy, limit, startAt, endAt etc.
} from 'firebase/firestore';
import { <%- modelName %>Data } from './<%- collection.collectionId %>.types'; // Import the generated model type
import { <%- modelName %>QueryBuilder } from './<%- collection.collectionId %>.query'; // Import the generated query builder
import { <%- modelName %>UpdateBuilder } from './<%- collection.collectionId %>.update'; // Import the generated update builder

// Define types for data manipulation.
// AddData: Exclude fields that should not be provided on creation (e.g., read-only fields managed by Firestore).
// UpdateData: Make all fields optional for partial updates.
// TODO: Refine which fields are Omitted based on schema (e.g., fields with defaultValue: serverTimestamp?)
// Note: For UpdateData, the type should allow FieldValue types (increment, arrayUnion, etc.)
//       This is complex to type perfectly, so we use Partial<> for now, and users must
//       ensure they pass the correct FieldValue types where needed.
type <%- modelName %>AddData = Omit<<%- modelName %>Data, 'createdAt' /* Add other read-only fields here */>;
type <%- modelName %>UpdateData = Partial<<%- modelName %>AddData>;

/**
 * Typed reference to the '<%- collection.collectionId %>' collection.
 */
export class <%- modelName %>Collection {
  public ref: CollectionReference<<%- modelName %>Data>;

  private firestore: Firestore; // Store firestore instance

  constructor(firestore: Firestore) {
    this.firestore = firestore; // Store firestore instance
    this.ref = collection(firestore, '<%- collection.collectionId %>') as CollectionReference<<%- modelName %>Data>;
  }

  /** Returns the DocumentReference for a given ID. */
  doc(id: string): DocumentReference<<%- modelName %>Data> {
    return doc(this.ref, id);
  }

  /** Adds a new document with the given data, returning the new DocumentReference. */
  async add(data: <%- modelName %>AddData): Promise<DocumentReference<<%- modelName %>Data>> {
    const dataWithDefaults = { ...data };
    // Automatically add server timestamps for fields configured in the schema
<% Object.values(collection.fields).forEach(field => { -%>
<%   if (field.defaultValue === 'serverTimestamp') { -%>
    if (!dataWithDefaults.<%- field.fieldName %>) { // Add timestamp if not explicitly provided
        (dataWithDefaults as any).<%- field.fieldName %> = serverTimestamp();
    }
<%   } -%>
<% }); -%>
    return addDoc(this.ref, dataWithDefaults);
  }

  /** Sets the data for a document, overwriting existing data. */
  async set(id: string, data: <%- modelName %>AddData): Promise<void> {
    // Note: set might need its own data type if it should behave differently than add
    await setDoc(this.doc(id), data);
  }

  /**
   * Creates a new UpdateBuilder instance for the document with the given ID.
   * @param id The ID of the document to update.
   * @returns A new UpdateBuilder instance.
   */
  update(id: string): <%- modelName %>UpdateBuilder {
    return new <%- modelName %>UpdateBuilder(this.doc(id));
  }

  /** Deletes a document. */
  async delete(id: string): Promise<void> {
    await deleteDoc(this.doc(id));
  }

  /** Reads a single document. */
  async get(id: string): Promise<<%- modelName %>Data | undefined> {
    const snapshot = await getDoc(this.doc(id));
    return snapshot.exists() ? snapshot.data() : undefined;
  }

  /**
   * Creates a new QueryBuilder instance for this collection.
   * @returns A new QueryBuilder instance.
   */
  query(): <%- modelName %>QueryBuilder {
    return new <%- modelName %>QueryBuilder(this.firestore, this.ref);
  }

  // Example: findByEmail(email: string) { ... }
  // Example: listActiveUsers(limitCount: number) { ... }

  // --- Helper for data conversion? ---
  // Maybe add private methods for converting data before writes (e.g., handling default values)
}