/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  DocumentReference,
  // updateDoc, // Handled by base class commit()
  FieldValue, // Keep for potential direct use if needed, though base provides helpers
  // serverTimestamp, // Handled by base class helper _serverTimestamp()
  // increment, // Handled by base class helper _increment()
  // arrayUnion, // Handled by base class helper _arrayUnion()
  // arrayRemove, // Handled by base class helper _arrayRemove()
  // deleteField, // Handled by base class helper _deleteField()
} from 'firebase/firestore';
// Runtime Imports
import { BaseUpdateBuilder } from '@fireschema/ts-runtime'; // Adjust path/package name as needed

// Local Imports
import { <%- modelName %>Data } from './<%- collection.collectionId %>.types';

/**
 * A typed builder for creating update operations for '<%- collection.collectionId %>' documents, extending BaseUpdateBuilder.
 */
export class <%- modelName %>UpdateBuilder extends BaseUpdateBuilder<<%- modelName %>Data> {

  // Constructor is inherited from BaseUpdateBuilder
  // _docRef and _updateData are managed by the base class

  // --- Field Setters ---
<% Object.values(collection.fields).forEach(field => { -%>
<%   const fieldType = getTypeScriptType(field, options); -%>
  /** Sets the value for the '<%- field.fieldName %>' field. */
  set<%- capitalizeFirstLetter(field.fieldName) %>(value: <%- fieldType %>): this {
    // Call the protected _set method from the base class
    return this._set('<%- field.fieldName %>', value);
  }

<%   // --- Atomic Operations --- -%>
<%   if (field.type === 'number') { -%>
  /** Atomically increments the '<%- field.fieldName %>' field. */
  increment<%- capitalizeFirstLetter(field.fieldName) %>(value: number): this {
    // Call the protected _increment helper (or _set with increment(value))
    return this._increment('<%- field.fieldName %>', value);
    // Alternatively: return this._set('<%- field.fieldName %>', increment(value));
  }
<%   } -%>
<%   if (field.type === 'array') { -%>
<%     const itemType = field.items ? getTypeScriptType(field.items, options) : 'any'; -%>
  /** Atomically adds elements to the '<%- field.fieldName %>' array field. */
  arrayUnion<%- capitalizeFirstLetter(field.fieldName) %>(values: <%- itemType %>[] | <%- itemType %>): this {
    // Call the protected _arrayUnion helper
    return this._arrayUnion('<%- field.fieldName %>', Array.isArray(values) ? values : [values]);
    // Alternatively: return this._set('<%- field.fieldName %>', arrayUnion(...(Array.isArray(values) ? values : [values])));
  }

  /** Atomically removes elements from the '<%- field.fieldName %>' array field. */
  arrayRemove<%- capitalizeFirstLetter(field.fieldName) %>(values: <%- itemType %>[] | <%- itemType %>): this {
    // Call the protected _arrayRemove helper
    return this._arrayRemove('<%- field.fieldName %>', Array.isArray(values) ? values : [values]);
    // Alternatively: return this._set('<%- field.fieldName %>', arrayRemove(...(Array.isArray(values) ? values : [values])));
  }
<%   } -%>
<%   if (field.type === 'timestamp' && field.defaultValue === 'serverTimestamp') { -%>
  /** Sets the '<%- field.fieldName %>' field to the server timestamp. */
  set<%- capitalizeFirstLetter(field.fieldName) %>ToServerTimestamp(): this {
    // Call the protected _serverTimestamp helper
    return this._serverTimestamp('<%- field.fieldName %>');
    // Alternatively: return this._set('<%- field.fieldName %>', serverTimestamp());
  }
<%   } -%>
<%   if (!field.required) { -%>
  /** Deletes the '<%- field.fieldName %>' field. */
  delete<%- capitalizeFirstLetter(field.fieldName) %>(): this {
    // Call the protected _deleteField helper
    return this._deleteField('<%- field.fieldName %>');
    // Alternatively: return this._set('<%- field.fieldName %>', deleteField());
  }
<%   } -%>

<% }); -%>
  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
  // Example: markAsRead() { return this._set('read', true); }
}