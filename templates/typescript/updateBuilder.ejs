/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  DocumentReference,
  // updateDoc, // Handled by base class commit()
  FieldValue, // Keep for potential direct use if needed, though base provides helpers
  Timestamp,  // Needed for timestamp field setters
  // DocumentReference, // Needed for reference field setters (Already imported above)
  // serverTimestamp, // Handled by base class helper _serverTimestamp()
  // increment, // Handled by base class helper _increment()
  // arrayUnion, // Handled by base class helper _arrayUnion()
  // arrayRemove, // Handled by base class helper _arrayRemove()
  // deleteField, // Handled by base class helper _deleteField()
} from 'firebase/firestore';
// Runtime Imports
import { BaseUpdateBuilder } from '@fireschema/ts-runtime'; // Adjust path/package name as needed

// Local Imports
import { <%- modelName %>Data } from './<%- collection.collectionId %>.types.js';
<%# Dynamically import other Data types needed for reference fields %>
<% const referencedTypes = new Set(); %>
<% Object.values(collection.fields).forEach(field => { %>
<%   if (field.type === 'reference' && field.referenceTo) { %>
<%     referencedTypes.add(field.referenceTo); %>
<%   } %>
<% }); %>
<% referencedTypes.forEach(refType => { %>
<%   const refModelName = camelToPascalCase(refType); %>
import type { <%- refModelName %>Data } from './<%- refType %>.types.js';
<% }); %>

/**
 * A typed builder for creating update operations for '<%- collection.collectionId %>' documents, extending BaseUpdateBuilder.
 */
export class <%- modelName %>UpdateBuilder extends BaseUpdateBuilder<<%- modelName %>Data> {

  // Constructor is inherited from BaseUpdateBuilder
  // _docRef and _updateData are managed by the base class

  // --- Field Setters ---

<% // --- Loop through all generated update method definitions --- %>
<% updateMethods.forEach(method => { %>
<%   const field = method.originalField; // Get the original field definition %>
<%   const fieldType = getTypeScriptType(field, options); // Get base type for atomic ops %>

  /** Sets the value for the '<%- method.fieldPath %>' field. */
  <%- method.methodName %>(value: <%- method.fieldType %>): this {
    // Use the pre-calculated field path and method name
    return this._set('<%- method.fieldPath %>', value);
  }

<%   // --- Generate Atomic Operations based on original field type --- %>
<%   if (field.type === 'number') { %>
  /** Atomically increments the '<%- method.fieldPath %>' field. */
  increment<%- method.methodName.substring(3) %>(value: number): this { // Remove 'set' prefix for atomic ops
    return this._increment('<%- method.fieldPath %>', value);
  }
<%   } %>
<%   if (field.type === 'array') { %>
<%     const itemType = field.items ? getTypeScriptType(field.items, options) : 'any'; %>
  /** Atomically adds elements to the '<%- method.fieldPath %>' array field. */
  arrayUnion<%- method.methodName.substring(3) %>(values: <%- itemType %>[] | <%- itemType %>): this {
    return this._arrayUnion('<%- method.fieldPath %>', Array.isArray(values) ? values : [values]);
  }

  /** Atomically removes elements from the '<%- method.fieldPath %>' array field. */
  arrayRemove<%- method.methodName.substring(3) %>(values: <%- itemType %>[] | <%- itemType %>): this {
    return this._arrayRemove('<%- method.fieldPath %>', Array.isArray(values) ? values : [values]);
  }
<%   } %>
<%   if (field.type === 'timestamp' && field.defaultValue === 'serverTimestamp') { %>
  /** Sets the '<%- method.fieldPath %>' field to the server timestamp. */
  set<%- method.methodName.substring(3) %>ToServerTimestamp(): this { // Keep 'set' prefix for this specific operation
    return this._serverTimestamp('<%- method.fieldPath %>');
  }
<%   } %>
<%   if (!field.required) { %>
  /** Deletes the '<%- method.fieldPath %>' field. */
  delete<%- method.methodName.substring(3) %>(): this { // Remove 'set' prefix
    return this._deleteField('<%- method.fieldPath %>');
  }
<%   } %>

<% }); %>
  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
  // Example: markAsRead() { return this._set('read', true); }
}