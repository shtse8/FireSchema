/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  DocumentReference,
  // updateDoc, // Handled by base class commit()
  FieldValue, // Keep for potential direct use if needed, though base provides helpers
  Timestamp,  // Needed for timestamp field setters
  // DocumentReference, // Needed for reference field setters (Already imported above)
  // serverTimestamp, // Handled by base class helper _serverTimestamp()
  // increment, // Handled by base class helper _increment()
  // arrayUnion, // Handled by base class helper _arrayUnion()
  // arrayRemove, // Handled by base class helper _arrayRemove()
  // deleteField, // Handled by base class helper _deleteField()
} from 'firebase/firestore';
// Runtime Imports
import { BaseUpdateBuilder } from '@fireschema/ts-runtime'; // Adjust path/package name as needed

// Local Imports
import { <%- modelName %>Data } from './<%- collection.collectionId %>.types.js';
<%# Dynamically import other Data types needed for reference fields %>
<% const referencedTypes = new Set(); %>
<% Object.values(collection.fields).forEach(field => { %>
<%   if (field.type === 'reference' && field.referenceTo) { %>
<%     referencedTypes.add(field.referenceTo); %>
<%   } %>
<% }); %>
<% referencedTypes.forEach(refType => { %>
<%   const refModelName = camelToPascalCase(refType); %>
import type { <%- refModelName %>Data } from './<%- refType %>.types.js';
<% }); %>

/**
 * A typed builder for creating update operations for '<%- collection.collectionId %>' documents, extending BaseUpdateBuilder.
 */
export class <%- modelName %>UpdateBuilder extends BaseUpdateBuilder<<%- modelName %>Data> {

  // Constructor is inherited from BaseUpdateBuilder
  // _docRef and _updateData are managed by the base class

  // --- Field Setters ---

<% /* --- Recursive Function to Generate Setters for Map Properties --- */ %>
<% function generateSettersForProperties(properties, pathPrefix, namePrefix) { %>
<%   Object.entries(properties).forEach(([propName, propDef]) => { %>
<%     const fullPath = pathPrefix + propName; %>
<%     const methodNamePart = namePrefix + capitalizeFirstLetter(propName); %>
<%     const propType = getTypeScriptType(propDef, options); %>
<%
    // --- Generate Setter for the property ---
-%>
  /** Sets the value for the '<%- fullPath %>' field. */
  set<%- methodNamePart %>(value: <%- propType %>): this {
    return this._set('<%- fullPath %>', value);
  }

<%
    // --- Generate Atomic Operations for the property ---
-%>
<%     if (propDef.type === 'number') { -%>
  /** Atomically increments the '<%- fullPath %>' field. */
  increment<%- methodNamePart %>(value: number): this {
    return this._increment('<%- fullPath %>', value);
  }
<%     } -%>
<%     if (propDef.type === 'array') { -%>
<%       const itemType = propDef.items ? getTypeScriptType(propDef.items, options) : 'any'; -%>
  /** Atomically adds elements to the '<%- fullPath %>' array field. */
  arrayUnion<%- methodNamePart %>(values: <%- itemType %>[] | <%- itemType %>): this {
    return this._arrayUnion('<%- fullPath %>', Array.isArray(values) ? values : [values]);
  }

  /** Atomically removes elements from the '<%- fullPath %>' array field. */
  arrayRemove<%- methodNamePart %>(values: <%- itemType %>[] | <%- itemType %>): this {
    return this._arrayRemove('<%- fullPath %>', Array.isArray(values) ? values : [values]);
  }
<%     } -%>
<%     if (propDef.type === 'timestamp' && propDef.defaultValue === 'serverTimestamp') { -%>
  /** Sets the '<%- fullPath %>' field to the server timestamp. */
  set<%- methodNamePart %>ToServerTimestamp(): this {
    return this._serverTimestamp('<%- fullPath %>');
  }
<%     } -%>
<%     if (!propDef.required) { -%>
  /** Deletes the '<%- fullPath %>' field. */
  delete<%- methodNamePart %>(): this {
    return this._deleteField('<%- fullPath %>');
  }
<%     } -%>
<%
    // --- Recurse if the property is itself a map ---
    if (propDef.type === 'map' && propDef.properties) {
      generateSettersForProperties(propDef.properties, fullPath + '.', methodNamePart + '_');
    }
-%>

<%   }); %>
<% } %>
<% /* --- End Recursive Function --- */ %>

<% // --- Main Loop for Top-Level Fields --- %>
<% Object.values(collection.fields).forEach(field => { -%>
<%   if (field.type === 'map' && field.properties) { -%>
<%     // For map types, generate setters for nested properties
       generateSettersForProperties(field.properties, field.fieldName + '.', capitalizeFirstLetter(field.fieldName) + '_');
-%>
<%   } else { -%>
<%     // For non-map types, generate standard top-level setters/operations -%>
<%     const fieldType = getTypeScriptType(field, options); -%>
  /** Sets the value for the '<%- field.fieldName %>' field. */
  set<%- capitalizeFirstLetter(field.fieldName) %>(value: <%- fieldType %>): this {
    return this._set('<%- field.fieldName %>', value);
  }

<%     // --- Atomic Operations for top-level field --- -%>
<%     if (field.type === 'number') { -%>
  /** Atomically increments the '<%- field.fieldName %>' field. */
  increment<%- capitalizeFirstLetter(field.fieldName) %>(value: number): this {
    return this._increment('<%- field.fieldName %>', value);
  }
<%     } -%>
<%     if (field.type === 'array') { -%>
<%       const itemType = field.items ? getTypeScriptType(field.items, options) : 'any'; -%>
  /** Atomically adds elements to the '<%- field.fieldName %>' array field. */
  arrayUnion<%- capitalizeFirstLetter(field.fieldName) %>(values: <%- itemType %>[] | <%- itemType %>): this {
    return this._arrayUnion('<%- field.fieldName %>', Array.isArray(values) ? values : [values]);
  }

  /** Atomically removes elements from the '<%- field.fieldName %>' array field. */
  arrayRemove<%- capitalizeFirstLetter(field.fieldName) %>(values: <%- itemType %>[] | <%- itemType %>): this {
    return this._arrayRemove('<%- field.fieldName %>', Array.isArray(values) ? values : [values]);
  }
<%     } -%>
<%     if (field.type === 'timestamp' && field.defaultValue === 'serverTimestamp') { -%>
  /** Sets the '<%- field.fieldName %>' field to the server timestamp. */
  set<%- capitalizeFirstLetter(field.fieldName) %>ToServerTimestamp(): this {
    return this._serverTimestamp('<%- field.fieldName %>');
  }
<%     } -%>
<%     if (!field.required) { -%>
  /** Deletes the '<%- field.fieldName %>' field. */
  delete<%- capitalizeFirstLetter(field.fieldName) %>(): this {
    return this._deleteField('<%- field.fieldName %>');
  }
<%     } -%>
<%   } -%>

<% }); -%>
  // --- End Field Setters ---

  // commit() method is inherited from BaseUpdateBuilder

  // --- Custom Update Methods Placeholder ---
  // Example: markAsRead() { return this._set('read', true); }
}