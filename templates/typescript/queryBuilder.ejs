/**
 * Generated by firestore-odm
 * Do not edit manually.
 */
import {
  Firestore,
  CollectionReference,
  Query,
  QueryConstraint,
  query,
  where as firestoreWhere, // Alias to avoid conflict with generated methods
  orderBy,
  limit,
  getDocs,
  // Add other query-related imports as needed (startAt, endAt, etc.)
} from 'firebase/firestore';
import { <%- modelName %>Data } from './<%- collection.collectionId %>.types';

// Define order direction
type OrderByDirection = 'desc' | 'asc';

/**
 * A typed query builder for the '<%- collection.collectionId %>' collection.
 */
export class <%- modelName %>QueryBuilder {
  private firestore: Firestore;
  private collectionRef: CollectionReference<<%- modelName %>Data>;
  private constraints: QueryConstraint[] = [];

  constructor(firestore: Firestore, collectionRef: CollectionReference<<%- modelName %>Data>) {
    this.firestore = firestore;
    this.collectionRef = collectionRef;
  }

// --- Field-specific Where Methods ---
<% Object.values(collection.fields).forEach(field => { -%>
<%   const queryInfos = getQueryInfoForField(field, options); -%>
<%   if (queryInfos.length > 0) { -%>
  // Overloads for '<%- field.fieldName %>' field type safety based on operator
<%   queryInfos.forEach(info => { -%>
  where<%- capitalizeFirstLetter(field.fieldName) %>(op: '<%- info.op %>', value: <%- info.valueType %>): this;
<%   }); -%>
  // Implementation signature for '<%- field.fieldName %>'
  where<%- capitalizeFirstLetter(field.fieldName) %>(
    op: string, // Use string for implementation signature
    value: any   // Use any for implementation signature
  ): this {
    this.constraints.push(firestoreWhere('<%- field.fieldName %>', op as WhereFilterOp, value));
    return this;
  }
<%   } -%>
<% }); -%>
  // --- End Field-specific Where Methods ---

  /**
   * Adds an orderBy clause to the query.
   *
   * @param fieldPath The field to order by.
   * @param directionStr Order direction ('asc' or 'desc'). Defaults to 'asc'.
   * @returns The QueryBuilder instance for chaining.
   */
  orderBy(
    fieldPath: keyof <%- modelName %>Data,
    directionStr: OrderByDirection = 'asc'
  ): this {
    this.constraints.push(orderBy(fieldPath as string, directionStr));
    return this;
  }

  /**
   * Adds a limit clause to the query.
   *
   * @param limitCount The maximum number of documents to return.
   * @returns The QueryBuilder instance for chaining.
   */
  limit(limitCount: number): this {
    this.constraints.push(limit(limitCount));
    return this;
  }

  // TODO: Add limitToLast, startAt, startAfter, endAt, endBefore methods

  /**
   * Executes the query and returns the matching documents.
   *
   * @returns A promise that resolves with an array of document data.
   */
  async get(): Promise<<%- modelName %>Data[]> {
    const q = query(this.collectionRef, ...this.constraints);
    const snapshot = await getDocs(q);
    return snapshot.docs.map(doc => doc.data());
    // TODO: Consider returning document IDs as well, maybe { id: string, data: ModelData }[]
  }
}