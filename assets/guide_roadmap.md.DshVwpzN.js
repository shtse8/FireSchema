import{_ as t,c as r,o as a,ag as n}from"./chunks/framework.Yj-QZn9W.js";const p=JSON.parse('{"title":"Roadmap & Future Plans","description":"","frontmatter":{},"headers":[],"relativePath":"guide/roadmap.md","filePath":"guide/roadmap.md"}'),o={name:"guide/roadmap.md"};function i(s,e,l,d,c,u){return a(),r("div",null,e[0]||(e[0]=[n('<h1 id="roadmap-future-plans" tabindex="-1">Roadmap &amp; Future Plans <a class="header-anchor" href="#roadmap-future-plans" aria-label="Permalink to &quot;Roadmap &amp; Future Plans&quot;">​</a></h1><p>This page outlines the planned future development directions for FireSchema.</p><h2 id="planned-runtimes-targets" tabindex="-1">Planned Runtimes &amp; Targets <a class="header-anchor" href="#planned-runtimes-targets" aria-label="Permalink to &quot;Planned Runtimes &amp; Targets&quot;">​</a></h2><ul><li><p><strong>Dart Admin Runtime (via REST)</strong></p><ul><li><strong>Target:</strong> <code>dart-admin-rest</code> (tentative name)</li><li><strong>Description:</strong> Generate Dart code suitable for server-side environments (like Dart Frog, Shelf, or Cloud Functions for Firebase written in Dart) by interacting with the Firestore REST API.</li><li><strong>Motivation:</strong> Addresses the lack of an official Firebase Admin SDK for Dart, enabling type-safe Firestore access from Dart backends. This leverages Dart&#39;s strengths on the server while providing crucial database interaction capabilities.</li><li><strong>Status:</strong> Planned.</li></ul></li><li><p><strong>C# Client Runtime</strong></p><ul><li><strong>Target:</strong> <code>csharp-client</code> (tentative name)</li><li><strong>Description:</strong> Generate C# code compatible with the Firebase SDK for .NET, suitable for client applications (e.g., Unity, MAUI, Blazor).</li><li><strong>Status:</strong> Planned.</li></ul></li></ul><h2 id="potential-generator-enhancements" tabindex="-1">Potential Generator Enhancements <a class="header-anchor" href="#potential-generator-enhancements" aria-label="Permalink to &quot;Potential Generator Enhancements&quot;">​</a></h2><ul><li><strong>More Advanced Schema Validation:</strong> Improved generation of runtime checks or assertions based on more JSON Schema validation keywords (e.g., <code>pattern</code>, <code>minItems</code>, <code>uniqueItems</code>).</li><li><strong>Improved Error Reporting:</strong> More specific error messages during code generation if schema or configuration issues are detected.</li><li><strong>Plugin System:</strong> Potentially allow users to create custom adapters or modify template generation through a plugin architecture (longer-term idea).</li><li><strong>Support for External <code>$ref</code>s:</strong> Explore options for resolving <code>$ref</code>s pointing to external schema files, possibly via configuration or preprocessing steps.</li></ul><h2 id="community-contributions" tabindex="-1">Community Contributions <a class="header-anchor" href="#community-contributions" aria-label="Permalink to &quot;Community Contributions&quot;">​</a></h2><p>Contributions are welcome! If you are interested in adding support for a new language target or enhancing the generator, please refer to the project&#39;s contribution guidelines on GitHub (link needed) or open an issue to discuss your ideas.</p>',8)]))}const g=t(o,[["render",i]]);export{p as __pageData,g as default};
