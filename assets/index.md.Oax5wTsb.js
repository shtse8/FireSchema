import{_ as t,c as a,o,ag as r}from"./chunks/framework.Yj-QZn9W.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"FireSchema","text":"Strongly-Typed Firestore ODM","tagline":"Generate type-safe code for TypeScript & Dart from your Firestore schema. Boost productivity and prevent runtime errors.","image":null,"actions":[{"theme":"brand","text":"Get Started","link":"/guide/introduction"},{"theme":"alt","text":"View on GitHub","link":"https://github.com/shtse8/firestore-odm"}]},"features":[{"title":"üî• Schema-Driven Generation","details":"Define your Firestore structure once using JSON Schema and generate consistent code for multiple platforms."},{"title":"üîí Type Safety First","details":"Catch Firestore data errors at compile time, not runtime. Provides strongly-typed models, query builders, and update builders."},{"title":"üéØ Multi-Target Support","details":"Generate code specifically tailored for TypeScript (Client & Admin SDKs) and Dart (Client SDK)."},{"title":"‚öôÔ∏è Independent Runtimes","details":"Lightweight, target-specific runtime libraries provide base functionality without bloating your generated code."},{"title":"üöÄ Boost Productivity","details":"Automate boilerplate code generation, letting you focus on building features faster. Includes helpers for CRUD, queries, and atomic operations."},{"title":"üß© Extensible Adapters","details":"The core generator uses an adapter pattern, making it potentially extensible to support other languages or targets in the future."}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),i={name:"index.md"};function l(d,e,n,s,c,u){return o(),a("div",null,e[0]||(e[0]=[r('<h2 id="feature-status-roadmap" tabindex="-1">Feature Status &amp; Roadmap <a class="header-anchor" href="#feature-status-roadmap" aria-label="Permalink to &quot;Feature Status &amp; Roadmap&quot;">‚Äã</a></h2><p>FireSchema aims to provide a robust, type-safe interface for Firestore across multiple platforms. Here&#39;s a snapshot of current support and future plans:</p><table tabindex="0"><thead><tr><th style="text-align:left;">Target Platform</th><th style="text-align:left;">Status</th><th style="text-align:left;">Supported SDK¬π</th><th style="text-align:left;">Test Coverage¬≤</th><th style="text-align:left;">Key Features / Notes</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>TypeScript (Client)</strong></td><td style="text-align:left;">‚úÖ Supported</td><td style="text-align:left;"><code>firebase</code> v9+ (Modular)</td><td style="text-align:left;">Unit &amp; Integration (Emulator)</td><td style="text-align:left;">Ideal for Web Apps (React, Vue, etc.) &amp; Node.js clients. Full CRUD, Querying, Streaming, Subcollections, Transactions/Batches.</td></tr><tr><td style="text-align:left;"><strong>TypeScript (Admin)</strong></td><td style="text-align:left;">‚úÖ Supported</td><td style="text-align:left;"><code>firebase-admin</code> (Node.js)</td><td style="text-align:left;">Unit &amp; Integration (Emulator)</td><td style="text-align:left;">Ideal for Backends (Node.js, Cloud Functions). Full CRUD, Querying, Subcollections, Transactions/Batches. <strong>No Streaming.</strong></td></tr><tr><td style="text-align:left;"><strong>Dart (Client)</strong></td><td style="text-align:left;">‚úÖ Supported</td><td style="text-align:left;"><code>cloud_firestore</code> (Flutter)</td><td style="text-align:left;">Unit (Fake) &amp; Integration (Emulator)</td><td style="text-align:left;">Ideal for Flutter Apps &amp; Dart clients. Full CRUD, Querying, Streaming, Subcollections, Transactions/Batches. Includes <code>serverTimestamp</code> handling on <code>add</code>.</td></tr><tr><td style="text-align:left;"><strong>Dart (Admin/Server)</strong></td><td style="text-align:left;">‚è≥ Planned</td><td style="text-align:left;">Firestore REST API</td><td style="text-align:left;">N/A</td><td style="text-align:left;">Target: <code>dart-admin-rest</code> (tentative). <strong>Addresses lack of official Dart Admin SDK</strong>, enabling type-safe backend Dart Firestore access.</td></tr><tr><td style="text-align:left;"><strong>C# (Client)</strong></td><td style="text-align:left;">‚è≥ Planned</td><td style="text-align:left;">Firebase SDK for .NET (TBD)</td><td style="text-align:left;">N/A</td><td style="text-align:left;">Target: <code>csharp-client</code> (tentative). For Unity, MAUI, Blazor, etc.</td></tr></tbody></table><p><strong>Core Features (Supported across all current runtimes):</strong></p><ul><li>JSON Schema Definition (<code>timestamp</code>, <code>geopoint</code>, <code>reference</code>, <code>$ref</code>, basic validation)</li><li>Configuration File (<code>fireschema.config.json</code>)</li><li>Code Generation CLI (<code>fireschema generate</code>)</li><li>Type-Safe Data Models (<code>Data</code>, <code>AddData</code>, Nested Types, Enums)</li><li>Type-Safe Collection References with CRUD (<code>get</code>, <code>add</code>, <code>set</code>, <code>delete</code>)</li><li>Type-Safe Query Builders (<code>where[Field]</code>, <code>orderBy</code>, <code>limit</code>, Cursors, <code>in</code>, <code>array-contains</code>, etc.)</li><li>Type-Safe Update Builders (<code>set[Field]</code>, <code>increment[Field]</code>, <code>serverTimestamp</code>, <code>updateRaw</code> for <code>FieldValue</code>)</li><li>Subcollection Accessors</li></ul><p><strong>Notes:</strong></p><ol><li>You must install the specified Firebase SDK alongside the corresponding FireSchema runtime package in your project.</li><li>Test coverage indicates that automated tests exist for core runtime functionality. See individual runtime guides for more specifics.</li></ol><p>For detailed usage, please refer to the specific guides for each runtime target. See the <a href="./guide/roadmap.html">Roadmap</a> page for more details on planned features.</p>',8)]))}const f=t(i,[["render",l]]);export{g as __pageData,f as default};
